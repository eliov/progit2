[[_first_time]]
=== İlk Git quraşdırması

Sisteminizdə artıq Git olduğuna görə öz Git mühitinizi özəlləşdirmək üçünü bir neçə şey etmək istəyəcəksiniz.
Verilmiş komputerdə bunları sadəcə bir dəfə etməlisiniz; onlar yenilənmələrə baxmayaraq özlərini qoruyacaqlar.
Siz həm də əmrləri yenidən işlətməklə onları istədiyiniz zaman dəyişdirə bilərsiniz.

Git, `git config` adlanan alət ilə yüklənir və bu Gitin bütün işləmə aspektlərini idarə edən konfiqurasiya dəyişənlərini almağa və təyin etməyə imkan verir. (((git commands, config)))

Bu dəyişənlər üç fərqli yerdə saxlanıla bilərlər:

1. `/etc/gitconfig` faylı: Sistemdəki hər istifadəçiyə və onların sahib olduğu bütün anbarlara tətbiq olunan dəyərləri özündə saxlayır.
  Əgər `--system` seçimini `git config`-ə yazsanız, o xüsusi olaraq bu fayla oxuyub yazacaqdır.
   Sistem konfiqurasiya faylı olduğuna görə, siz onu dəyidirmək üçün administrator və ya superuser səlahiyyətlərinə sahib olmalısınız. 
2. `~/.gitconfig` or `~/.config/git/config` faylı: Spesifik olaraq sizin istifadəçinizə uyğun olan dəyərləri saxlayan fayldır.
  `--global` seçimini əlavə edərək, Git-in bu fayl üzərinə yazmasını və oxumasına yön verə bilərsiniz və sistem üzərində işlədiyiniz _bütün_ anbarları əhatə edəcək.
3. Hansı anbarı işlətməyinizdən asılı olmayaraq Git qovluğundaki `config` faylı (`.git/config`)  xüsusi olaraq həmin anbara aiddir.
  Siz Git-ə `--local` seçimini əlavə edərək bu fayldan oxumağa və yazmağa məcbur edə bilərsiniz, amma bu, əslində standart olaraq belədir.
  (Təəccüblü deyil ki, bu seçimin qaydasında işləməsi üçün Git anbarı içində bir yerdə olmağınız lazımdır.)
  
Hər səviyyənin dəyərləri, özündən əvvəlki səviyyənin dəyərlərinin üzərinə yazılır, beləliklə `.git/config`-dəki dəyərlər `/etc/gitconfig`-dəki dəyərləri əvəzləyir.

Windows sistemlərində Git `$HOME` qovluğunda olan (bir çoxu üçün `C:\Users\$USER`) `.gitconfig` faylını axtarır
O həmçinin hələ də `/etc/gitconfig` axtarır çünki o MSys kökü ilə bağlantılıdır,

###It also still looks for `/etc/gitconfig`, although it's relative to the MSys root, which is wherever you decide to install Git on your Windows system when you run the installer.

Əgər siz Windows üçün Git-in 2.x və ya yuxarı versiyasını işlədirsinizsə, Windows XP-də `C:\Documents and Settings\All Users\Application Data\Git\config` adresində,  Windows Vista və daha yenilərində isə `C:\ProgramData\Git\config` adresində sistem səviyyəli konfiqurasiya faylını tapa bilərsiniz.
Konfiqurasiya faylı yalnız admin tərəfindən icra olunan `git config -f <file>` əmri ilə dəyişdirilə bilər.

Bütün sazlamalarınıza və onların hardan gəldiyinə aşağıdakı komandanı icra edərək baxa bilərsiniz.

[source,console]
----
$ git config --list --show-origin
----

==== Sizin Kimliyiniz

Git-i quraşdırarkən birinci etməli olduğunuz şey öz istifadəçi adınızı və email adresinizi təyin etməkdir.
Bu vacibdir çünki, hər bir Git commit-i bu informasiya vasitəsiylə işləyir və siz aşağıdakıları yaratmağa başladığınız andan etibarən hər bir commitin içinə möhrlənir:

[source,console]
----
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
----

Təkrarlayaq, siz bunu yalnız `--global` seçimini işlədərkən bircə dəfə etməlisiniz, ona görə ki, ondan sonra Git həmişə nə etsəniz bu informasiyanı istifadə edəcək.
Əgər xüsusi bir proyekt üçün ayrı bir ad və email işlətməli olsanız, həmin proyektin içində `--global` seçimini çağırmadan yuxarıdakı əmrləri icra edə bilərsiniz.

Qrafik interfeysli alətlərdən bir çoxu ilkin quraşdırma zamanı bunu etməyinizə kömək edəcək.

[[_editor]]
==== Sizin Redaktorunuz

Öz kimliyinizi təyin etdikdən sonra, Git'in sizdən mesaj yazmağınızı istəyərkən lazım olan default mətn redaktorunu sazlaya bilərsiniz.

Əgər sazlanmasa, Git sistemin default redaktorunu istifadə edir.

Əgər Emacs kimi fərqli mətn redaktoru istifadə etmək istəyirsinizsə, aşağıdakıları edə bilərsiniz:

[source,console]
----
$ git config --global core.editor emacs
----

Əgər Windows sistemində fərqli bir mətn redaktoru istifadə etmək istəyirsinizsə, onun icra olunan faylına tam yolu göstərməlisiniz.
Redaktorunuzun necə *** qablaşdırıldığından asılı olaraq bu fərqli ola bilər.

Məşhur bir proqramlaşdırma redaktoru olan Notepad ++ istifadə edərkən çox ehtimal ki, 32-bit versiyasından istifadə etmək istəyəcəksiniz, çünki 64-bit versiyasını yazarkən bütün plaginləri dəstəklənmir.
Əgər siz 32-bitli Windows sistemindəsinizsə və ya 64-bitlik bir sistemdə 64-bitlik bir redaktorunuz varsa, belə bir şey yazacaqsınız:

[source,console]
----
$ git config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
----

[NOTE]
====
Vim, Emacs və Notepad++ mətn redaktorları Linux və macOS və ya Windows sistemi kimi Unix əsaslı sistemlərdə developerlər tərəfindən tez-tez istifadə olunan populyar mətn redaktorlarıdır.
Əgər başqa bir redaktorunuzdan və ya 32-bitlik versiyadan istifadə edirsinizsə, <<C-git-commands#_core_editor>> bölməsində Git ilə sevdiyiniz redaktorunuzu necə qurmağınızla bağlı xüsusi təlimatları tapa bilərsiniz.
====

[WARNING]
====
Əgər redaktorunuzu belə qurmursunuzsa, Git onu işə salmağa çalışdığı zaman həqiqətən də çaşdırıcı vəziyyətə düşə bilərsiniz.
Windows sistemindəki bir nümunə Git-in başlatdığı düzəliş zamanı vaxtından əvvəl bitmiş Git-i daxil edə bilər.
====

==== Parametrlərinizi Yoxlayın

Konfiqurasiya parametrlərinizi yoxlamaq istəyirsinizsə, Git'in həmin nöqtədə tapa biləcəyi bütün parametrləri sadalamaq üçün 'git config --list' əmrindən istifadə edə bilərsiniz:

[source,console]
----
$ git config --list
user.name=John Doe
user.email=johndoe@example.com
color.status=auto
color.branch=auto
color.interactive=auto
color.diff=auto
...
----

Açarları bir dəfədən çox görə bilərsiniz, çünki Git eyni düyməni müxtəlif sənədlərdən (məsələn, `/etc/gitconfig` və `~/.gitconfig`) oxuyur.
Bu vəziyyətdə Git gördüyü hər bir unikal açar üçün son dəyərdən istifadə edir.
Git'in müəyyən bir açarının dəyərinin nə olduğunu `git config <key>`yazmaqla yoxlaya bilərsiniz:(((git commands, config)))

[source,console]
----
$ git config user.name
John Doe
----

[NOTE]
====
Git eyni konfiqurasiyalı dəyişən dəyərini birdən çox fayldan oxuya bildiyindən, bu dəyərlərdən biri üçün gözlənilməz bir dəyərin olması və bunun səbəbini bilməməyiniz mümkündür.
Buna bənzər hallarda, Git-i həmin dəyər üçün _origin_-ə soruşa bilərsiniz və bu dəyəri təyin edərkən hansı konfiqurasiya sənədinin söylədiyini sizə xəbər verəcəkdir:

[source,console]
----
$ git config --show-origin rerere.autoUpdate
file:/home/johndoe/.gitconfig	false
----
====
