[[_git_branches_overview]]
=== Nutshell-də Branch-lar

Git-in branching yolunu həqiqətən başa düşmək üçün geri addım atmalı və Git-in məlumatlarını necə saxladığını araşdırmalıyıq.

<<ch01-getting-started#ch01-getting-started>> fəsildən xatırladığınız kimi, Git məlumatları bir sıra dəyişikliklər və ya fərqlər kimi saxlamır, əksinə _snapshotlar_ kimi saxlayır.

Commit etdiyiniz zaman Git, səhnələşdirdiyiniz məzmunun snapshotu olan bir əmr obyekti saxlayır.
Bu obyekt eyni zamanda müəllifin adını və e-poçt adresini, yazdığınız mesajı və bu əməli yerinə yetirmədən əvvəl gələn (törədicisi və ya valideynləri) göstəriş və göstərişləri göstərmişdir: ilkin törətmə üçün sıfır valideynlər, normal bir əməl üçün bir valideyn və iki və ya daha çox branch-ın birləşməsi nəticəsində əmələ gələn çoxlu valideynlər.

Bunu görüntüləmək üçün üç fayldan ibarət bir qovluğunun olduğunu fərz edək və hamısını səhnələşdirib commit götürdünüz.
Faylların qurulması hər biri üçün bir yoxlama cədvəlini tərtib edir (<<ch01-getting-started#ch01-getting-started>>bəhs etdiyimiz SHA-1 hash), faylın həmin versiyasını Git depolarında saxlayır (Git  kimi _blobs_ onlara aiddir) istifadə edərək sahəsinə nəzarət hissəsini əlavə edir:

[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'Initial commit'
----

`git commit` əmrini yerinə yetirdikdə, Git hər alt bölməni yoxlayır (bu vəziyyətdə yalnız root layihə qovluğu) və onları Git deposunda ağac obyekti kimi saxlayır.
Git sonra metadata və root layihə ağacına göstərici olan bir obyekt yaradır ki, lazım olduqda həmin anı yenidən yarada bilsin.(((git commands, commit)))

Git depozitinizdə artıq beş obyekt var: üç _blobs_ (hər üç fayldan birinin məzmununu təmsil edən), qovluğun məzmununu sadalayan bir _tree_ və hansı fayl adlarının blobs kimi saxlanıldığını və o root ağacına və göstərilən bütün metadata göstərici ilə bir _commit_.

.Commit və Onun Ağacı
image::images/commit-and-tree.png[Commit və onun ağacı]

Bəzi dəyişikliklər etsəniz və yenidən commit etsəniz, növbəti əmr əvvəlcədən gələn commit göstəricisini saxlayır.

.Commit-lər və Onun Valideynləri
image::images/commits-and-parents.png[Commitlər və onun valideynləri]

Git-dəki bir branch, onun commit-ləri arasındakı yüngül daşınan göstəricilərindən biridir.
Git-də standart branch adı `master`-dir.
Commit etməyə başladığınız zaman etdiyiniz son commit-ə işarə edən bir `master` branch verilir.
Hər dəfə commit etdiyiniz zaman `master` branch-ı göstəricisi avtomatik olaraq irəliləyir.

[NOTE]
====
``mater'' branch-ı Git-də xüsusi branch deyildir.(((master)))
Tamamilə hər hansı digər filial kimidir.
Təxminən hər bir depozitin bir səbəbi, `git init` əmrinin onu standart olaraq yaratması və çoxlarının onu dəyişdirmək üçün narahat etməməsidir.
====

.Branch və Onun Commit Tarixi
image::images/branch-and-history.png[Branch və onun commit tarixi]

[[_create_new_branch]]
==== Təzə Branch Yaratmaq

(((branches, creating)))
Yeni bir branch yaratdıqda nə baş verir?
Yaxşı, bunu etmək hərəkət etməyiniz üçün yeni bir göstərici yaradır.
Deyək ki, `testing` adlı yeni bir branch yaratmaq istəyirsiniz.
Bunu `git branch` əmri ilə edirsiniz:(((git commands, branch)))

[source,console]
----
$ git branch testing
----

Bu, hazırda olduğunuz eyni commit yeni bir göstərici yaradır.

.Eyni seriyaya commit edən iki branch
image::images/two-branches.png[Eyni seriyaya commit edən iki branch]

Git hazırda hansı branch-ın üzərində olduğunu necə bilir?
`HEAD` adlı xüsusi bir göstərici saxlayır.
Qeyd edək ki, Subversion və ya CVS kimi istifadə oluna biləcəyiniz digər VNS-lərdəki `HEAD` anlayışından çox fərqlidir.
Git-də bu, hazırda olduğunuz local branch-a işarədir.
Bu vəziyyətdə yenə də `master`-in üstündəsiniz.
`git branch` əmri yalnız yeni bir branch yaratdı - o branch-a keçmədi.

.Branch-a HEAD göstəricisi
image::images/head-to-master.png[Branch-a HEAD göstəricisi]

Şöbə nöqtələrinin göstərildiyi yerləri göstərən sadə `git log` əmrini işlədərək bunu asanlıqla görə bilərsiniz.
Bu seçim `--decorate` adlanır.

[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD -> master, testing) Add feature #32 - ability to add new formats to the central interface
34ac2 Fix bug #1328 - stack overflow under certain conditions
98ca9 Initial commit
----

`f30ab` əməlinin yanında orada olan `master` və `testing` branch-larını görə bilərsiniz.

[[_switching_branches]]
==== Switching Branches

(((branches, switching)))
Mövcud bir branch-a keçmək üçün `git checkout` əmrini yerinə yetirirsiniz.(((git commands, checkout)))
Yeni `testing` branch-a keçək:

[source,console]
----
$ git checkout testing
----

Bu, `testing` şöbəsinə işarə etmək üçün `HEAD`-ı hərəkətə gətirir.

.HEAD mövcud branch-ı işarə edir
image::images/head-to-testing.png[HEAD mövcud filiala işarə edir]

Bunun əhəmiyyəti nədir?
Yaxşı, başqa bir commit edək:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made a change'
----

.HEAD branch-ı bir commit götürüldükdə irəliləyir
image::images/advance-testing.png[HEAD branch-ı bir commit götürüldükdə irəliləyir]

Bu, maraqlıdır, çünki indi `testing` branch-nız irəliləmişdir, ancaq `master` branch-nız branch-ları dəyişmək üçün `git checkout` zamanı işlədiyiniz vəzifəni göstərir.
Gəlin yenidən `master` branch-a qayıdaq:

[source,console]
----
$ git checkout master
----

[NOTE]
.`git log` _həmişə_ _bütün branch-ları göstərmir
====
Hal-hazırda `git log` işlətməli olsaydınız, yeni yaradılan `testing` branch-nın hara getdiyi barədə düşünə bilərsiniz, çünki çıxışda görünməyəcəkdir.

Branch yoxa çıxmadı; Git sadəcə bu branch-la maraqlandığınızı bilmir və sizə nə istədiyini göstərməyə çalışır.
Başqa sözlə, default olaraq, `git log`, yalnız yoxladığınız branch-ın altındakı törəmə tarixçəsini göstərəcəkdir.

İstədiyiniz branch üçün törəmə tarixçəsini göstərmək üçün onu dəqiq göstərməlisiniz: `git log testing`.
Bütün branch-ları göstərmək üçün `git log` əmrinizə `--all` əlavə edin.
====

.Siz çıxış edəndə HEAD hərəkət edir
image::images/checkout-master.png[Siz çıxış edəndə HEAD hərəkət edir]

Bu əmr iki şeyi etdi.
HEAD göstəricisini `master` branch-a göstərmək üçün geri qoydu və işçi qovluğunuzdakı faylları `master` işarələdiyi şəklə geri çevirdi.
Bu da bu anda etdiyiniz dəyişikliklərin layihənin köhnə versiyasından ayrılacağını bildirir.
Fərqli bir istiqamətə gedə bilmək üçün `testing` şöbənizdə gördüyünüz işləri geri qaytarır.

[NOTE]
.Branch-ları dəyişdirmək işçi qovluğunuzdakı faylları dəyişdirir
====
Git-də filialları dəyişdirdiyiniz zaman işlədiyiniz qovluqdakı faylların dəyişəcəyini nəzərə almaq vacibdir.
Köhnə bir branch-a keçsəniz, işlədiyiniz qovluq bu branch-da sonuncu dəfə etdiyiniz kimi görünəcəkdir.
Git təmiz bir şəkildə edə bilmirsə, ümumiyyətlə keçməyə imkan verməz.
====

Yeniən bir neçə dəyişiklik və commit edək:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made other changes'
----

İndi layihənizin tarixi fərqləndi (bax <<divergent_history>>).
Bir branch yaratdınız və işə keçdiniz, bir az iş gördünüz, sonra yenidən əsas branch-a keçdiniz və başqa işlər gördünüz.
Bu dəyişikliklərin hər ikisi ayrı-ayrı branch-da ayrılır: hazır olduqda filiallar arasında geri və irəli keçə bilərsiniz.
Və siz bunların hamısını sadə `branch`, `checkout`və `commit` əmrləri ilə etdiniz.

[[divergent_history]]
.Fərqli tarix
image::images/advance-master.png[Fərqli tarix]

Bunu `git log` əmri ilə də asanlıqla görə bilərsiniz.
`git log --oneline --decorate --graph --all` işlədirsinizsə,branch-larınızın harada olduğunu və tarixinizin necə ayrıldığını göstərən əmrlərinizin tarixini çap edəcəkdir.

[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) Made other changes
| * 87ab2 (testing) Made a change
|/
* f30ab Add feature #32 - ability to add new formats to the central interface
* 34ac2 Fix bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project
----

Git-dəki bir branch, əslində, işarələdiyi 40 simvol SHA-1 çeki olan sadə bir fayl olduğundan, branch-lar yaratmaq və məhv etmək asan və ucuzdur.
Yeni bir filial yaratmaq, 41 baytı bir fayla yazmaq qədər sürətli və sadədir (40 simvol və yeni bir xətt).

Bu, ən köhnə VNS alətlər şöbəsinin, layihənin bütün sənədlərinin ikinci qovluğa kopyalanmasını özündə cəmləşdirən yoldan kəskin şəkildə fərqlidir.
Layihənin ölçüsündən asılı olaraq bu bir neçə saniyə və ya hətta dəqiqə çəkə bilər, halbuki Git-də proses həmişə ani olur.
Ayrıca, valideynlərimizi etdiyimiz zaman qeyd etdiyimiz üçün birləşmə üçün uyğun bir birləşmə bazası tapmaq avtomatik olaraq bizim üçün edilir və ümumiyyətlə bunu etmək çox asandır.
Bu xüsusiyyətlər inkişaf etdiriciləri tez-tez filial yaratmağa və istifadə etməyə həvəsləndirməyə kömək edir.

Görək niyə belə etməlisiniz.

[NOTE]
.Yeni bir branch yaratmaq və eyni zamanda ona keçid
====
Yeni bir branch yaratmaq və eyni zamanda yeni branch-a keçmək istəmək tipikdir - bu bir əməliyyatla with `git checkout -b <newbranchname>` ilə edilə bilər.
====
