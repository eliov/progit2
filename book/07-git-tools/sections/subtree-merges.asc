[[_subtree_merge]]
===== Subtree Birləşdirməsi

Subtree birləşdirmə ideyası odur ki, iki layihəniz var və layihələrdən biri digərinin alt kateqoriyası ilə əlaqələndirildiyini əhatə edir.  
Bir subtree birləşməsi göstərdiyiniz zaman, Git həmin an birinin digərinin subtree-si olduğunu anlamaq və lazımi şəkildə birləşdirmək üçün kifayət qədər ağıllıdır.

Gəlin mövcud bir layihəyə ayrı bir layihə əlavə etmək və sonra ikincinin kodunu birincinin alt bölməsinə birləşdirmək nümunəsini göstərək.

Əvvəlcə Rack tətbiqini layihəmizə əlavə edəcəyik.  
Rack layihəsini öz layihəmizdə uzaq bir remote olaraq əlavə edəcəyik və sonra öz branch-ında yoxlayacağıq:

[source,console]
----
$ git remote add rack_remote https://github.com/rack/rack
$ git fetch rack_remote --no-tags
warning: no common commits
remote: Counting objects: 3184, done.
remote: Compressing objects: 100% (1465/1465), done.
remote: Total 3184 (delta 1952), reused 2770 (delta 1675)
Receiving objects: 100% (3184/3184), 677.42 KiB | 4 KiB/s, done.
Resolving deltas: 100% (1952/1952), done.
From https://github.com/rack/rack
 * [new branch]      build      -> rack_remote/build
 * [new branch]      master     -> rack_remote/master
 * [new branch]      rack-0.4   -> rack_remote/rack-0.4
 * [new branch]      rack-0.9   -> rack_remote/rack-0.9
$ git checkout -b rack_branch rack_remote/master
Branch rack_branch set up to track remote branch refs/remotes/rack_remote/master.
Switched to a new branch "rack_branch"
----

İndi `rack_branch` branch-mızda Rack layihəsinin kökü və `master` branch-mızda öz layihəmiz var.  
Birini, daha sonra isə digərini yoxlasanız, fərqli layihə köklərinə sahib olduqlarını görə bilərsiniz:

[source,console]
----
$ ls
AUTHORS         KNOWN-ISSUES   Rakefile      contrib         lib
COPYING         README         bin           example         test
$ git checkout master
Switched to branch "master"
$ ls
README
----


Bu qəribə bir anlayışdır.  
Depodakı branch-ların hamısı eyni layihənin branch-ları olmamalıdır.  Çox yaygın deyil, çünki nadir hallarda faydalıdır, lakin branch-ların tamamilə fərqli tarixə sahib olmasını əldə etmək olduqca asandır.

Bu vəziyyətdə, Rack layihəsini alt layihə olaraq `master` proyektimizə çəkmək istəyirik.  
Bunu `git read-tree` ilə Git-də edə bilərik. 
`read-tree` və onun dostları haqqında <<ch10-git-internals#ch10-git-internals>>-də daha çox məlumat əldə edəcəksiniz, ancaq indi onun bir branch-ın kök ağacını cari hazırlama sahənizdə və iş qovluğunda oxuduğunu bilin. 
Yenidən `master` branch-a qayıtdıq və `rack_branch` branch-nı əsas layihəmizin `master` branch-ın `rack` alt bölməsinə pull edirik:

[source,console]
----
$ git read-tree --prefix=rack/ -u rack_branch
----

Commit zamanı, bütün alt Rack fayllarımız alt bölümdə olduğu kimi görünür - sanki biz onları tarball-dan köçürmüşük. 
Maraqlı olan budur ki, dəyişiklikləri branch-ların birindən digərinə qədər asanlıqla birləşdirə bilərik.  
Beləliklə, Rack layihəsi yenilənirsə, o branch-a keçərək üstdəki dəyişiklikləri pull edə bilərik:

[source,console]
----
$ git checkout rack_branch
$ git pull
----

Sonra biz bu dəyişiklikləri yenidən `master` branch-mıza birləşdirə bilərik.  
Dəyişiklikləri pull etmək və commit mesajını qabaqcadan hazırlamaq üçün `--squash` seçimini, həmçinin recursive birləşmə strategiyasının  `-Xsubtree` seçimini istifadə edin.  
Rekursiv strategiya burada standartdır, lakin aydınlıq üçün onu da daxil edirik.

[source,console]
----
$ git checkout master
$ git merge --squash -s recursive -Xsubtree=rack rack_branch
Squash commit -- not updating HEAD
Automatic merge went well; stopped before committing as requested
----

Rack layihəsindəki bütün dəyişikliklər birləşdirilmiş və yerli olaraq həyata keçirilməyə hazırdır.
Siz bunun əksini də edə bilərsiniz - `master` branch-ınızın `rack`subdirectory-sində dəyişikliklər aparın və sonra onları `rack_branch` branch-a birləşdirin və onları maintainers-ə təqdim edin və ya yuxarı tərəfə push edin.

Bu, submodule-lərdən istifadə etmədən (biz <<ch07-git-tools#_git_submodules>>-də əhatə edəcəyik) istifadə etmədən submodule-un iş axınına bir qədər bənzəyən bir iş axınına sahib olmaq üçün bir imkan verir.  
Digər branch layihələri ilə branch-larımızı depolarımızda saxlaya bilərik və onları bəzən layihəmizə birləşdirə bilərik.  
Bəzi yollarla yaxşıdır, məsələn, bütün kodlar bir yerə sadiqdir.  Bununla birlikdə, digər çatışmazlıqları var ki, dəyişiklikləri yenidən birləşdirmək və ya təsadüfən bir-birinə bağlı olmayan bir depozitə basaraq səhv etmək daha az mürəkkəbdir və səhv etmək daha asandır.

Başqa bir qəribəlik də `rack` alt qovluğunuzdakılar ilə `rack_branch` branch-nızdakı kod arasındakı fərqi əldə etmək - onları birləşdirməyin lazım olub-olmadığını görməkdir - çünki, normal `diff` əmrindən istifadə edə bilməyəcəksiniz.  
Bunun əvəzinə müqayisə etmək istədiyiniz branch-la `git diff-tree` işlətməlisiniz:

[source,console]
----
$ git diff-tree -p rack_branch
----

Və ya, `rack` alt qovluğunuzda olanı, serverdəki `master` branch-ı sonuncu dəfə gətirdiyinizlə müqayisə etmək üçün bunu işlədə bilərsiniz:

[source,console]
----
$ git diff-tree -p rack_remote/master
----
