==== Git və Bazaar

DVCS arasında daha bir məşhur  http://bazaar.canonical.com[Bazaar]-dır.
Bazaar pulsuz və açıq mənbəlidir və  https://www.gnu.org[GNU Project]-nin bir hissəsidir.
Bu Git-dən çox fərqli davranır.
Bəzən Git ilə eyni şeyi etmək üçün fərqli bir keyword istifadə etməlisiz və ümumi olan bəzi keyword-lər eyni məna daşımır.
Xüsusilə branch idarəetməsi çox fərqlidir və xüsusən kimsə Git'in kainatından gələndə qarışıqlığa səbəb ola bilər.
Buna baxmayaraq bir Git deposundan Bazaar deposu üzərində işləmək mümkündür.

Git'i Bazaar müştərisi kimi istifadə etməyə imkan verən bir çox layihə var.
Burada https://github.com/felipec/git-remote-bzr[] saytında tapa biləcəyiniz Felipe Contreras layihəsini istifadə edəcəyik.
Qurmaq üçün yalnız git-remote-bzr faylını `$PATH`-nızdakı bir qovluğa yükləməlisiniz:

[source,console]
----
$ wget https://raw.github.com/felipec/git-remote-bzr/master/git-remote-bzr -O ~/bin/git-remote-bzr
$ chmod +x ~/bin/git-remote-bzr
----

Bazaarın quraşdırılmasına da ehtiyacınız var.
Bu qədər!

===== Bir Bazaar deposundan bir Git deposu yaradın

İstifadəsi sadədir.
Bir Bazaar deposunu əvvəldən əlavə edən `bzr::` ilə klonlaşdırmaq kifayətdir.
Git və Bazaar hər ikisi də cihazınıza tam klonlar verdiyindən local Bazaar klonuna bir Git klonu əlavə etmək mümkündür, lakin tövsiyə edilmir.
Git klonunuzu birbaşa Bazaar klonunuzun bağlandığı yerə - mərkəzi depoya əlavə etmək daha asandır.

Fərz edək ki, `bzr+ssh://developer@mybazaarserver:myproject` ünvanında olan uzaq bir depo ilə işləmisiniz.
Sonra aşağıdakı şəkildə klonlamalısınız:

[source,console]
----
$ git clone bzr::bzr+ssh://developer@mybazaarserver:myproject myProject-Git
$ cd myProject-Git
----

Bu nöqtədə Git deposunuz yaradılır, lakin optimal disk istifadəsi üçün sıxılmır.
Bu səbəbdən Git deposunuzu təmizləmək və yığmaq lazımdır, xüsusən də böyükdürsə:

[source,console]
----
$ git gc --aggressive
----

===== Bazaar branch-ları

Bazaar yalnız branch-ları klonlamağa imkan verir, ancaq bir depo bir neçə branch-dan ibarət ola bilər və `git-remote-bzr` hər ikisini də klonlaya bilər.
Məsələn, branch-ı klonlamaq üçün: 

[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs/trunk emacs-trunk
----

Və bütün deponu klonlamaq üçün:

[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs emacs
----

İkinci komanda, emacs deposundakı bütün branch-ları klonlaşdırır; buna baxmayaraq, bəzi branch-lara işarə etmək mümkündür:

[source,console]
----
$ git config remote-bzr.branches 'trunk, xwindow'
----

Bəzi uzaq depolar branch-larını siyahıya almağa imkan vermir, bu halda onları manual olaraq təyin etməlisiniz və klonlama əmrində konfiqurasiyanı təyin edə bilsəniz də, bunu daha asan tapa bilərsiniz:

[source,console]
----
$ git init emacs
$ git remote add origin bzr::bzr://bzr.savannah.gnu.org/emacs
$ git config remote-bzr.branches 'trunk, xwindow'
$ git fetch
----

===== .bzrignore ilə ignore edilənləri ignore edin

Bazaar ilə idarə olunan bir layihə üzərində çalışdığınız üçün `.gitignore` faylı yaratmamalısınız, çünki təsadüfən onu versiya nəzarəti altına olacaqsınız və Bazaar ilə işləyən digər insanlar narahat olacaqlar.
Çözüm, `.git/info/exclude` faylını simvolik bir link və ya adi bir fayl olaraq yaratmaqdır.
Bu sualın necə həll ediləcəyini daha sonra görəcəyik.

Bazaar, faylları ignore etmək üçün Git ilə eyni modeli istifadə edir, eyni zamanda Git-ə ekvivalenti olmayan iki xüsusiyyəti var.
Tam təsviri  http://doc.bazaar.canonical.com/bzr.2.7/en/user-reference/ignore-help.html[the documentation]-də tapa bilərsiniz.
İki xüsusiyyət bunlardır:



1. "!!" "!" qaydada göstərilsə də, müəyyən fayl nümunələrini ignore etməyə imkan verir.
2. Bir sətrin əvvəlindəki "RE:" bir https://docs.python.org/3/library/re.html[Python regular expression] təyin etməyə imkan verir (Git yalnız shell glob-lara icazə verir). 

Nəticə olaraq, nəzərə alınacaq iki fərqli vəziyyət var:

1. Əgər `.bzrignore` faylında bu iki xüsusi prefixes-dən heç biri yoxdursa, onda depoda sadəcə simvolik bir əlaqə qura bilərsiniz: `ln -s .bzrignore .git/info/exclude`.
2. Əks təqdirdə, `.git/info/exclude` faylını yaratmalı və  `.bzrignore`-dakı tam eyni faylları ignore etməlisiniz.

Nə olursa olsun, `.git/info/exclude` faylının hər zaman `.bzrignore` yansıtdığından əmin olmaq üçün `.bzrignore` dəyişikliyinə qarşı xəbərdar olmalısınız.
Həqiqətən, `.bzrignore` faylı dəyişdirilərsə və "!!" ilə başlayan bir və ya daha çox sətir var idi və ya "RE:", Git bu sətirləri şərh edə bilmirsə,
`.git/info/exclude` faylınızı  `.bzrignore` ilə ignore olunanlarla eyni faylları ignore etmək üçün uyğunlaşdırmalısınız.
Üstəlik, `.git/info/exclude` faylı simvolik bir əlaqə olsaydı, əvvəlcə simvolik linki silməli, `.bzrignore` `.git/info/exclude` şəklində kopyalayıb sonra ikincisini uyğunlaşdırmalısınız.
Bununla birlikdə, onun yaradılmasında diqqətli olun, çünki Git ilə bu faylın bir ana qovluğu xaric edildikdə bir faylı yenidən daxil etmək mümkün deyil.

===== Uzaq deponun dəyişikliklərini fetch edin

Remote-un dəyişikliklərini əldə etmək üçün Git əmrlərindən istifadə edərək dəyişiklikləri adətən fetch edirsiniz.
Dəyişikliklərinizin `master` branch-ında olduğunu düşünərək, `origin/master` branch-ında işlərinizi birləşdirir və ya yenidən artırırsınız:

[source,console]
----
$ git pull --rebase origin
----

===== Uzaqdakı depoda işinizi push edin

Bazaar da birləşmə commit-i konsepsiyasına sahib olduğundan birləşdirmə commit-ini irəli sürsəniz, heç bir problem olmayacaqdır.
Beləliklə, bir branch-da işləyə, dəyişiklikləri `master` halına gətirə və işinizi push edə bilərsiniz.
Sonra, branch-larınızı yaradırsınız, işinizi həmişəki kimi sınaqdan keçirirsiniz.
Nəhayət işinizi Bazaar deposuna push edirsiniz:

[source,console]
----
$ git push origin master
----

===== Xəbərdarlıqlar

Git'in uzaqdan köməkçilər çərçivəsinin tətbiq olunan bəzi məhdudiyyətləri var.
Xüsusilə, bu əmrlər işləmir:

* git push origin :branch-to-delete (Bazaar bu şəkildə ref silmələrini qəbul edə bilməz)
* git push origin old:new (`old`-u push edəcək)
* git push --dry-run origin branch (push edəcək)

===== Qısa Məzmun

Git və Bazaar modelləri bir-birinə bənzədiyi üçün sərhəd xaricində işləyərkən çox müqavimət göstərmir.
Məhdudiyyətlərə diqqət yetirdiyiniz və uzaqdakı deponun local olaraq Git olmadığını bildiyiniz müddətdə yaxşı olacaqsınız.
