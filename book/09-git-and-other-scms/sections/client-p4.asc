==== Git və Perforce

(((Interoperation with other VCSs, Perforce)))
(((Perforce)))
Perforce korporativ mühitlərdə çox populyar bir versiya nəzarət sistemidir.
1995-ci ildən bəri mövcuddur, bu da bu bölmədə yer alan ən qədim sistemdir.
Beləliklə, gününün məhdudiyyətləri ilə dizayn edilmişdir; hər zaman tək bir mərkəzi serverə bağlı olduğunuzu və yalnız bir versiyanın yerli diskdə saxlandığını düşünür.
Əmin olmaq üçün xüsusiyyətləri və məhdudiyyətləri bir neçə spesifik problemə çox uyğundur, lakin Perforce istifadə edərək Git-in daha yaxşı işləyəcəyi bir çox layihə var.

Perforce və Git istifadəsini qarışdırmaq istəsəniz iki seçim var.
Əhatə edəcəyimiz ilk şey, Perforce depolarınızın alt ağaclarını Git read-write depoları kimi göstərməyə imkan verən Perforce istehsalçılarının ``Git Fusion'' körpüsüdür.
İkincisi, Git'i Perforce serverinin hər hansı bir yenidən konfiqurasiyasına ehtiyac olmadan Perforce müştərisi kimi istifadə etməyə imkan verən müştəri tərəfi olan git-p4-dür.

[[_p4_git_fusion]]
===== Git Fusion

(((Perforce, Git Fusion)))
Perforce, bir Perforce serverini server tərəfindəki Git depoları ilə sinxronizasiya edən Git Fusion adlı bir məhsul təqdim edir (http://www.perforce.com/git-fusion[]).

====== Quraşdırılması

Nümunələrimiz üçün Perforce demonunu və Git Fusion-u işləyən bir virtual maşın yükləyən Git Fusion üçün ən asan quraşdırma metodundan istifadə edəcəyik.
Virtual maşın şəklini http://www.perforce.com/downloads/Perforce/20-User[] saytından əldə edə bilərsiniz və yüklədikdən sonra onu ən sevdiyiniz virtualizasiya proqramına daxil edin (VirtualBox istifadə edəcəyik).

Maşın ilk işə salındıqdan sonra üç Linux istifadəçisi üçün şifrənizi (`root`, `perforce` və `git`) fərdiləşdirməyinizi və bu quraşdırmanı digərlərindən fərqləndirmək üçün istifadə edilə bilən bir nümunə adını eyni şəbəkədə verməyinizi xahiş edir. 
Hamısı tamamlandıqda bunları görəcəksiniz:

.The Git Fusion virtual machine boot screen
image::images/git-fusion-boot.png[The Git Fusion virtual machine boot screen]

Burada göstərilən IP ünvanını qeyd etməlisiniz, daha sonra istifadə edəcəyik.
Sonra bir Perforce istifadəçisi yaradacağıq.
Aşağıdakı ``Login'' seçimini seçin və enter düyməsini basın (və ya maşın üçün SSH) və `root` olaraq daxil olun.
Sonra bir istifadəçi yaratmaq üçün bu əmrləri istifadə edin:

[source,console]
----
$ p4 -p localhost:1666 -u super user -f john
$ p4 -p localhost:1666 -u john passwd
$ exit
----

Birincisi, istifadəçini fərdiləşdirmək üçün VI redaktoru açacaq, ancaq `:wq` yazaraq enter düyməsini basaraq standartları qəbul edə bilərsiniz.
İkincisi, iki dəfə bir parol daxil etməyinizi istər.
Bir shell prompt ilə etməli olduğumuz şey budur, buna görə sessiyadan çıxın.

İzləmək üçün etməyiniz lazım olan növbəti şey, Git-ə SSL sertifikatlarının təsdiqlənməməsini söyləməkdir.
Git Fusion görüntüsü sertifikatla gəlir, ancaq virtual maşınınızın IP ünvanına uyğun gəlməyən bir domen üçündür, buna görə Git HTTPS bağlantısını rədd edəcəkdir.
Qalıcı bir quraşdırma olacaqsa, fərqli bir sertifikat quraşdırmaq üçün Perforce Git Fusion təlimatına müraciət edin; nümunə məqsədlərimiz üçün bu kifayət edəcəkdir:

[source,console]
----
$ export GIT_SSL_NO_VERIFY=true
----

İndi hər şeyin işlədiyini test edə bilərik.

[source,console]
----
$ git clone https://10.0.1.254/Talkhouse
Cloning into 'Talkhouse'...
Username for 'https://10.0.1.254': john
Password for 'https://john@10.0.1.254':
remote: Counting objects: 630, done.
remote: Compressing objects: 100% (581/581), done.
remote: Total 630 (delta 172), reused 0 (delta 0)
Receiving objects: 100% (630/630), 1.22 MiB | 0 bytes/s, done.
Resolving deltas: 100% (172/172), done.
Checking connectivity... done.
----

Virtual maşın şəkli klonlaya biləcəyiniz bir nümunə layihə ilə təchiz olunmuşdur.
Budur yuxarıda yaratdığımız `john` istifadəçisi ilə HTTPS üzərindən klonlaşdırırıq; Git bu əlaqə üçün etimadnaməsini tələb edir, lakin etimadnamə cache-i, sonrakı istəklər üçün bu addımı atlamağımıza imkan verəcəkdir.

====== Fusion Konfiqurasiyası

Git Fusion quraşdırıldıqdan sonra konfiqurasiyanı düzəltmək lazımdır.
Ən sevdiyiniz Perforce müştərisini istifadə edərək bunu etmək olduqca asan; yalnız Perforce serverindəki `//.git-fusion` qovluğunu iş sahənizə uyğunlaşdırın.
Fayl quruluşu belə görünür:

[source,console]
----
$ tree
.
├── objects
│   ├── repos
│   │   └── [...]
│   └── trees
│       └── [...]
│
├── p4gf_config
├── repos
│   └── Talkhouse
│       └── p4gf_config
└── users
    └── p4gf_usermap

498 directories, 287 files
----

`objects` qovluğuna Perforce obyektlərini Git-ə uyğunlaşdırmaq üçün Git Fusion tərəfindən daxili olaraq istifadə olunur və əksinə, orada heç bir şey ilə məşğul olmaq lazım deyil.
The `objects` directory is used internally by Git Fusion to map Perforce objects to Git and vice versa, you won't have to mess with anything in there.
Bu qovluqda qlobal bir `p4gf_config` faylı və hər bir depo üçün biri var - bunlar Git Fusion-un necə davrandığını təyin edən konfiqurasiya sənədləridir.
Root-dakı fayla nəzər salaq:

[source,ini]
----
[repo-creation]
charset = utf8

[git-to-perforce]
change-owner = author
enable-git-branch-creation = yes
enable-swarm-reviews = yes
enable-git-merge-commits = yes
enable-git-submodules = yes
preflight-commit = none
ignore-author-permissions = no
read-permission-check = none
git-merge-avoidance-after-change-num = 12107

[perforce-to-git]
http-url = none
ssh-url = none

[@features]
imports = False
chunked-push = False
matrix2 = False
parallel-push = False

[authentication]
email-case-sensitivity = no
----

Buradakı bu flag-ların mənalarına toxunmayacağıq, ancaq bunun Git-in konfiqurasiya üçün istifadə etdiyi kimi yalnız INI formatlı bir mətn faylı olduğunu unutmayın.
Bu fayl daha sonra `repos/Talkhouse/p4gf_config` kimi depoya məxsus konfiqurasiya sənədləri ilə ləğv edilə bilən qlobal seçimləri müəyyənləşdirir.
Bu faylı açsanız, qlobal standartlardan fərqli bəzi parametrləri olan bir `[@repo]` bölməsini görəcəksiniz.
Buna bənzər bölmələri də görəcəksiniz:

[source,ini]
----
[Talkhouse-master]
git-branch-name = master
view = //depot/Talkhouse/main-dev/... ...
----

Bu, Perforce branch-ı ilə Git branch-ı arasındakı bir mapping-dir.
Bölmə istədiyiniz hər hansı bir ad verilə bilər, ad özünəməxsus olduğu təqdirdə.
`git-branch-name`, Git altında çətin olacaq bir depo yolunu daha səmimi bir ada çevirməyə imkan verir.
`View` ayarı, standart görünüş uyğunlaşdırma sintaksisindən istifadə edərək Perforce fayllarının Git deposuna necə uyğunlaşdırıldığını idarə edir.
Bu nümunədə olduğu kimi birdən çox uyğunlaşma müəyyən edilə bilər:

[source,ini]
----
[multi-project-mapping]
git-branch-name = master
view = //depot/project1/main/... project1/...
       //depot/project2/mainline/... project2/...
----

Bu yolla normal iş sahəsi xəritənizə qovluqların strukturundakı dəyişikliklər daxildirsə, bunu Git deposu ilə təkrarlaya bilərsiniz.

Müzakirə edəcəyimiz son sənəd Perforce istifadəçilərini Git istifadəçiləri ilə əlaqələndirən və hətta ehtiyacınız olmaya biləcək `users/p4gf_usermap`dır.
Bir Perforce dəyişikliyindən Git commit-inə çevrildikdə Git Fusion-un standart davranışı Perforce istifadəçisini axtarmaq və Git-dəauthor/committer sahəsi üçün orada saxlanılan e-poçt adresini və tam adından istifadə etməkdir.
Başqa bir şəkildə konvertasiya edərkən default Perforce istifadəçisini Git commit-inin müəllif sahəsində saxlanan e-poçt ünvanı ilə axtarmaq və dəyişiklikləri həmin istifadəçi kimi təqdim etməkdir (icazələrin tətbiqi ilə).
Əksər hallarda, bu davranış çox yaxşı olacaq, lakin aşağıdakı uyğunlaşdırma sənədini nəzərdən keçirin:

[source]
----
john john@example.com "John Doe"
john johnny@appleseed.net "John Doe"
bob employeeX@example.com "Anon X. Mouse"
joe employeeY@example.com "Anon Y. Mouse"
----

Hər sətir `<user> <email> "<full name>"` formatındadır və vahid istifadəçi xəritəsini yaradır.
İlk iki sətirdə iki fərqli e-poçt ünvanı eyni Perforce istifadəçi hesabına uyğunlaşdırılır.
Bu, Git'i bir neçə fərqli e-poçt ünvanı altında yaratdığınız (və ya e-poçt adreslərini dəyişdirdiyiniz), lakin eyni Perforce istifadəçisinə uyğunlaşdırılmasını istəməyiniz üçün faydalıdır.
Bir Perforce dəyişikliyindən bir Git commit-i yaradarkən, Git müəllif məlumatları üçün Perforce istifadəçisinə uyğun gələn ilk sətir istifadə olunur.

Son iki sətir, Bob və Joe-nun əsl adlarını və Git-dən yaradılan e-poçt adreslərini gizlədir.
Daxili bir layihə mənbəyi açmaq istəsəniz də yaxşıdır, ancaq işçilərinizin qovluğunu bütün dünyaya yayımlamaq istəmirsiniz.
Bütün Git commit-lərinin tək bir uydurma müəllifə aid edilməsini istəmədiyiniz təqdirdə e-poçt adresləri və tam adların unikal olması lazım olduğunu unutmayın.

====== Workflow

Perforce Git Fusion, Perforce və Git versiyası nəzarəti arasında iki tərəfli bir körpüdür.
Git tərəfdən işləməyin nə hiss etdiyinə bir nəzər salaq.
Yuxarıda göstərildiyi kimi bir konfiqurasiya faylı istifadə edərək ``Jam'' layihəsində uyğunlaşdırdığımızı güman edəcəyik, bu şəkildə klonlaya bilərik:

[source,console]
----
$ git clone https://10.0.1.254/Jam
Cloning into 'Jam'...
Username for 'https://10.0.1.254': john
Password for 'https://john@10.0.1.254':
remote: Counting objects: 2070, done.
remote: Compressing objects: 100% (1704/1704), done.
Receiving objects: 100% (2070/2070), 1.21 MiB | 0 bytes/s, done.
remote: Total 2070 (delta 1242), reused 0 (delta 0)
Resolving deltas: 100% (1242/1242), done.
Checking connectivity... done.
$ git branch -a
* master
  remotes/origin/HEAD -> origin/master
  remotes/origin/master
  remotes/origin/rel2.1
$ git log --oneline --decorate --graph --all
* 0a38c33 (origin/rel2.1) Create Jam 2.1 release branch.
| * d254865 (HEAD, origin/master, origin/HEAD, master) Upgrade to latest metrowerks on Beos -- the Intel one.
| * bd2f54a Put in fix for jam's NT handle leak.
| * c0f29e7 Fix URL in a jam doc
| * cc644ac Radstone's lynx port.
[...]
----

Bunu ilk dəfə etdiyiniz zaman biraz çəkə bilər.
Olan şey, Git Fusion Perforce tarixindəki bütün dəyişiklikləri Git commit-lərinə çevirir.
Bu, serverdə yerli olaraq baş verir, buna görə nisbətən sürətlidir, ancaq bir çox tarixiniz varsa, hələ bir az vaxt ala bilər.
Sonrakı gətirmələr artan dönüşüm edir, beləliklə Gitin yerli sürətinə daha çox bənzəyir.

Gördüyünüz kimi, depomuz işləyə biləcəyiniz digər Git deposuna bənzəyir.
Üç branch var və Git köməyi ilə `origin/master`-ni izləyən yerli bir `master` branch-ı yaratdı.
Gəlin bir az iş görək və bir neçə yeni commit yaradaq:

[source,console]
----
# ...
$ git log --oneline --decorate --graph --all
* cfd46ab (HEAD, master) Add documentation for new feature
* a730d77 Whitespace
* d254865 (origin/master, origin/HEAD) Upgrade to latest metrowerks on Beos -- the Intel one.
* bd2f54a Put in fix for jam's NT handle leak.
[...]
----

İki yeni vəzifəmiz var.
İndi başqasının işlədiyini yoxlayaq:

[source,console]
----
$ git fetch
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 3 (delta 2), reused 0 (delta 0)
Unpacking objects: 100% (3/3), done.
From https://10.0.1.254/Jam
   d254865..6afeb15  master     -> origin/master
$ git log --oneline --decorate --graph --all
* 6afeb15 (origin/master, origin/HEAD) Update copyright
| * cfd46ab (HEAD, master) Add documentation for new feature
| * a730d77 Whitespace
|/
* d254865 Upgrade to latest metrowerks on Beos -- the Intel one.
* bd2f54a Put in fix for jam's NT handle leak.
[...]
----

Deyəsən kimsə olub!
Bu baxışdan bunu bilmirsən, amma  `6afeb15` commit-i əslində bir Perforce müştərisindən istifadə edərək yaradılmışdır.
Sadəcə Git baxımından başqa bir commit-ə bənzəyir, bu da tam nöqtədir.
Gəlin Perforce serverinin birləşdirmə commit-i ilə necə məşğul olduğunu görək:

[source,console]
----
$ git merge origin/master
Auto-merging README
Merge made by the 'recursive' strategy.
 README | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git push
Counting objects: 9, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (9/9), done.
Writing objects: 100% (9/9), 917 bytes | 0 bytes/s, done.
Total 9 (delta 6), reused 0 (delta 0)
remote: Perforce: 100% (3/3) Loading commit tree into memory...
remote: Perforce: 100% (5/5) Finding child commits...
remote: Perforce: Running git fast-export...
remote: Perforce: 100% (3/3) Checking commits...
remote: Processing will continue even if connection is closed.
remote: Perforce: 100% (3/3) Copying changelists...
remote: Perforce: Submitting new Git commit objects to Perforce: 4
To https://10.0.1.254/Jam
   6afeb15..89cba2b  master -> master
----

Git düşünür ki, bu işləyir.
Gəlin `p4v`-nin düzəliş qrafiki xüsusiyyətindən istifadə edərək Perforce baxımından `README` faylının tarixinə nəzər salaq:

.Perforce revision graph resulting from Git push
image::images/git-fusion-perforce-graph.png[Perforce revision graph resulting from Git push]

Bu görünüşü əvvəllər heç görməmisinizsə, qarışıq görünə bilər, ancaq Git tarixçəsi üçün qrafik görüntüləyici ilə eyni anlayışları göstərir.
`README` faylının tarixçəsinə baxırıq, buna görə sol üstdəki qovluq ağacı yalnız müxtəlif branch-larda səthdə olduğu halda bu faylı göstərir.
Sağ üstdə, faylın müxtəlif düzəlişlərinin bir-birilə əlaqəli olduğuna dair əyani bir qrafik var və bu qrafın böyük şəkil görünüşü sağ alt hissədədir.
Görünüşün qalan hissəsi seçilmiş düzəliş üçün detallar görünüşünə verilir (bu vəziyyətdə `2`).

Diqqət çəkən bir şey qrafikin Git tarixindəki şəkilə bənzəməsidir.
Perforce-nin `1` və `2` commit-lərini saxlamaq üçün adlanan bir branch-ı yox idi, ona görə də `.git-fusion` qovluğunda ``anonymous'' bir branch yaratdı.
Bu, adı verilən bir Perforce branch-ına uyğun gəlməyən Git branch-ları üçün də baş verəcəkdir (və daha sonra onları konfiqurasiya sənədini istifadə edərək Perforce branch-ına uyğunlaşdıra bilərsiniz).

Bunların əksəriyyəti pərdə arxasında baş verir, amma nəticə budur ki, komandadakı bir nəfər Git, digəri Perforce istifadə edə bilər və heç biri digərinin seçimini bilmiyəcək.

====== Git-Fusion Nəticəsi

Perforce serverinizə girişiniz varsa (və ya əldə edə bilsəniz), Git Fusion, Git və Perforce'u bir-biri ilə danışdırmaq üçün əla bir yoldur.
Bir az konfiqurasiya var, amma öyrənmə əyrisi çox dik deyil.
Bu, Git-in tam gücündən istifadə ilə bağlı xəbərdarlıqların görünməyəcəyi bu hissədəki bəzi hissələrdən biridir.
Bu, Perforceun atdığınız hər şeydən məmnun qalacağı demək deyil - onsuz da push edilmiş bir keçmişi yenidən yazmağa çalışsanız, Git Fusion bunu rədd edəcək - ancaq Git Fusion təbii hiss etmək üçün çox çalışır.
Hətta Git alt modullarını da istifadə edə bilərsiniz (baxmayaraq ki, onlar Perforce istifadəçiləri üçün qəribə görünəcəklər) və branch-ları birləşdirə bilərsiniz (bu Perforce tərəfində inteqrasiya kimi qeyd olunacaq).

Serverinizin administratorunu Git Fusion qurmağa inandıra bilmirsinizsə, bu alətləri birlikdə istifadə etməyin bir yolu var.
[[_git_p4_client]]
===== Git-p4

(((git commands, p4)))
Git-p4, Git və Perforce arasında iki tərəfli bir körpüdür.
Tamamilə Git deponuzun içərisində işləyir, beləliklə Perforce serverinə hər hansı bir girişə ehtiyacınız olmayacaq (əlbəttə ki, istifadəçi məlumatları xaricində).
Git-p4, Git Fusion qədər çevik deyil və ya bir həll yolu tamamlamamaqla yanaşı, istədiyiniz işlərin əksəriyyətini server mühitinə müdaxilə olmadan etməyinizə imkan verir.

[NOTE]
======
Git-p4 ilə işləmək üçün `PATH`-nızın bir yerində `p4` alətinə ehtiyacınız olacaq.
Bu yazıdan etibarənhttp://www.perforce.com/downloads/Perforce/20-User[] saytında sərbəst şəkildə əldə edilə bilər.
======

====== Ayarlamaq

Məsələn, Perforce serverini yuxarıda göstərildiyi kimi Git Fusion OVA-dan çalışdıracağıq, lakin Git Fusion serverini bypass edərək birbaşa Perforce versiya nəzarətinə keçəcəyik.

`p4` əmr sətri müştərisini (git-p4-dən asılı olan) istifadə etmək üçün bir neçə mühit dəyişənini təyin etməlisiniz:

[source,console]
----
$ export P4PORT=10.0.1.254:1666
$ export P4USER=john
----

====== Başlayırıq

Git-də olduğu kimi, ilk əmr klonlaşdırmaqdır:

[source,console]
----
$ git p4 clone //depot/www/live www-shallow
Importing from //depot/www/live into www-shallow
Initialized empty Git repository in /private/tmp/www-shallow/.git/
Doing initial import of //depot/www/live/ from revision #head into refs/remotes/p4/master
----

Bu, Git baxımından ``shallow'' bir klon yaradır; yalnız ən son Perforce revizyonu Git'e idxal olunur; unutmayın, Perforce hər bir istifadəçiyə hər düzəliş vermək üçün dizayn edilməyib.
Bu, Git'i Perforce müştərisi kimi istifadə etmək üçün kifayətdir, lakin digər məqsədlər üçün bu kifayət deyil.

Tamamlandıqdan sonra tam işləyən bir Git depomuz var:

[source,console]
----
$ cd myproject
$ git log --oneline --all --graph --decorate
* 70eaf78 (HEAD, p4/master, p4/HEAD, master) Initial import of //depot/www/live/ from the state at revision #head
----

Perforce server üçün necə bir ``p4'' remote-nun olduğunu, ancaq hər şeyin standart bir klon kimi göründüyünə diqqət yetirin.
Əslində, bu bir az yanıltıcıdır; həqiqətən orada bir remote yoxdur.

[source,console]
----
$ git remote -v
----

Bu depoda heç bir remote yoxdur.
Git-p4, serverin vəziyyətini təmsil etmək üçün bəzi referanslar yaratdı və bunlar `git log` üçün remote-dan gələn referanslara bənzəyir, lakin onlar Git tərəfindən idarə olunmur və onlara push etmək olmur.

====== Workflow

Yaxşı, biraz iş görək.
Güman edək ki, çox vacib bir xüsusiyyət üzərində bir az irəliləyiş əldə etdiniz və bunu komandanızın qalan hissəsinə göstərməyə hazırsınız.

[source,console]
----
$ git log --oneline --all --graph --decorate
* 018467c (HEAD, master) Change page title
* c0fb617 Update link
* 70eaf78 (p4/master, p4/HEAD) Initial import of //depot/www/live/ from the state at revision #head
----

Perforce serverinə təqdim etməyə hazır olduğumuz iki yeni commit götürdük.
Bu gün başqa birinin işlədiyini yoxlayaq:

[source,console]
----
$ git p4 sync
git p4 sync
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
Import destination: refs/remotes/p4/master
Importing revision 12142 (100%)
$ git log --oneline --all --graph --decorate
* 75cd059 (p4/master, p4/HEAD) Update copyright
| * 018467c (HEAD, master) Change page title
| * c0fb617 Update link
|/
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

Göründüyü kimi onlar idi və  `master` və `p4/master` ayrıldı.
Perforce-in branching sistemi Git kimi _heç bir şey_ deyil, bu səbəbdən birləşmə commit-lərini təqdim etməyin heç bir mənası yoxdur.
Git-p4, commit-lərinizi yenidən düzəltməyinizi tövsiyə edir və hətta bunu etmək üçün qısa yolla gəlir:

[source,console]
----
$ git p4 rebase
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
No changes to import!
Rebasing the current branch onto remotes/p4/master
First, rewinding head to replay your work on top of it...
Applying: Update link
Applying: Change page title
 index.html | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
----

Çıxışdan çox şey bilə bilərsiniz, ancaq `git p4 rebase` `git p4 sync` üçün bir qısayoldur, ardından `git rebase p4/master` izləyin.
Xüsusilə birdən çox branch-la işləyəndə bundan biraz ağıllıdır, amma yaxşı bir yanaşma var.

İndi tariximiz yenidən xəttidir və dəyişikliklərimizi Perforce-a qaytarmaq üçün hazırıq.
`git p4 submit` əmri, `p4/master` və `master` arasındakı hər Git commit-i üçün yeni bir Perforce revizyonu yaratmağa çalışacaq.
Çalıştırmamız bizi sevdiyimiz redaktora salır və faylın məzmunu belə bir şeyə bənzəyir:

[source,console]
----
# A Perforce Change Specification.
#
#  Change:      The change number. 'new' on a new changelist.
#  Date:        The date this specification was last modified.
#  Client:      The client on which the changelist was created.  Read-only.
#  User:        The user who created the changelist.
#  Status:      Either 'pending' or 'submitted'. Read-only.
#  Type:        Either 'public' or 'restricted'. Default is 'public'.
#  Description: Comments about the changelist.  Required.
#  Jobs:        What opened jobs are to be closed by this changelist.
#               You may delete jobs from this list.  (New changelists only.)
#  Files:       What opened files from the default changelist are to be added
#               to this changelist.  You may delete files from this list.
#               (New changelists only.)

Change:  new

Client:  john_bens-mbp_8487

User: john

Status:  new

Description:
   Update link

Files:
   //depot/www/live/index.html   # edit


######## git author ben@straub.cc does not match your p4 account.
######## Use option --preserve-user to modify authorship.
######## Variable git-p4.skipUserNameCheck hides this message.
######## everything below this line is just the diff #######
--- //depot/www/live/index.html  2014-08-31 18:26:05.000000000 0000
+++ /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/index.html   2014-08-31 18:26:05.000000000 0000
@@ -60,7 +60,7 @@
 </td>
 <td valign=top>
 Source and documentation for
-<a href="http://www.perforce.com/jam/jam.html">
+<a href="jam.html">
 Jam/MR</a>,
 a software build tool.
 </td>
----

Bu, əsasən git-p4-in daxil etdiyi şeylər istisna olmaqla,  `p4 submit` düyməsini işə salmaqla gördüyünüz eyni məzmundur.
Git-p4, bir commit və ya dəyişiklik üçün bir ad verməli olduqda, Git və Perforce parametrlərinizi fərdi olaraq hörmət etməyə çalışır, lakin bəzi hallarda onu ləğv etmək istəyirsiniz.
Məsələn, idxal etdiyiniz Git commit-ini Perforce istifadəçi hesabına sahib olmayan bir iştirakçı yazmışsa, nəticədə dəyişikliklərin yazdıqları kimi görünməsini istəyə bilərsiniz (siz də yox).

Git-p4, bu Perforce dəyişikliyinin məzmunu olaraq Git commit-indən mesajı faydalı bir şəkildə idxal etdi, buna görə etməli olduğumuz şey iki dəfə saxlamaq və çıxmaqdır (hər bir commit üçün bir dəfə).
Nəticədə shell çıxışı belə görünəcəkdir:

[source,console]
----
$ git p4 submit
Perforce checkout for depot path //depot/www/live/ located at /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Synchronizing p4 checkout...
... - file(s) up-to-date.
Applying dbac45b Update link
//depot/www/live/index.html#4 - opened for edit
Change 12143 created with 1 open file(s).
Submitting change 12143.
Locking 1 files ...
edit //depot/www/live/index.html#5
Change 12143 submitted.
Applying 905ec6a Change page title
//depot/www/live/index.html#5 - opened for edit
Change 12144 created with 1 open file(s).
Submitting change 12144.
Locking 1 files ...
edit //depot/www/live/index.html#6
Change 12144 submitted.
All commits applied!
Performing incremental import into refs/remotes/p4/master git branch
Depot paths: //depot/www/live/
Import destination: refs/remotes/p4/master
Importing revision 12144 (100%)
Rebasing the current branch onto remotes/p4/master
First, rewinding head to replay your work on top of it...
$ git log --oneline --all --graph --decorate
* 775a46f (HEAD, p4/master, p4/HEAD, master) Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

Nəticə sanki sadəcə baş verənlərə ən yaxın bənzətmə olan bir `git push` işlətmişik.

Qeyd edək ki, bu müddət ərzində hər Git commit-i Perforce dəyişikliyinə çevrilir; onları tək bir dəyişiklik qrupuna yığmaq istəyirsinizsə, bunu `git p4 submit`-i işə salmadan əvvəl interaktiv bir bərpa ilə edə bilərsiniz.
Dəyişiklik olaraq təqdim olunan bütün commit-lərin SHA-1 hash-larının dəyişdiyini də unutmayın; çünki git-p4 çevirdiyi hər bir commit-in sonuna bir sətir əlavə edir:

[source,console]
----
$ git log -1
commit 775a46f630d8b46535fc9983cf3ebe6b9aa53145
Author: John Doe <john@example.com>
Date:   Sun Aug 31 10:31:44 2014 -0800

    Change page title

    [git-p4: depot-paths = "//depot/www/live/": change = 12144]
----

Birləşdirmə commit-ini təqdim etməyə çalışsanız nə olur?
Gəlin bir cəhd edək.
Budur düşdüyümüz vəziyyət:

[source,console]
----
$ git log --oneline --all --graph --decorate
* 3be6fd8 (HEAD, master) Correct email address
*   1dcbf21 Merge remote-tracking branch 'p4/master'
|\
| * c4689fc (p4/master, p4/HEAD) Grammar fix
* | cbacd0a Table borders: yes please
* | b4959b6 Trademark
|/
* 775a46f Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

Git və Perforce tarixi 775a46f-dən sonra ayrılır.
Git tərəfinin iki commit var, daha sonra Perforce başlığı ilə birləşdirmə, sonra başqa bir commit vardır.
Bunları Perforce tərəfindəki tək bir dəyişiklik üzərində təqdim etməyə çalışacağıq.
İndi təqdim etməyə çalışsaq nə olacağını görək:

[source,console]
----
$ git p4 submit -n
Perforce checkout for depot path //depot/www/live/ located at /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Would synchronize p4 checkout in /Users/ben/john_bens-mbp_8487/john_bens-mbp_8487/depot/www/live/
Would apply
  b4959b6 Trademark
  cbacd0a Table borders: yes please
  3be6fd8 Correct email address
----

`-n` flag-ı  `--dry-run`-nın qısaldılmasıdır və submit əmri real olaraq işləsəydi nə olacağını bildirməyə çalışır.
Bu vəziyyətdə, Perforce serverində hələ mövcud olmayan birləşdirilməmiş üç commit-ə uyğun üç Perforce dəyişiklikləri yaratdığımıza bənzəyir.
Bu, tam olaraq istədiyimiz kimi səslənir, gəlin nəticəyə baxaq:

[source,console]
----
$ git p4 submit
[…]
$ git log --oneline --all --graph --decorate
* dadbd89 (HEAD, p4/master, p4/HEAD, master) Correct email address
* 1b79a80 Table borders: yes please
* 0097235 Trademark
* c4689fc Grammar fix
* 775a46f Change page title
* 05f1ade Update link
* 75cd059 Update copyright
* 70eaf78 Initial import of //depot/www/live/ from the state at revision #head
----

Göndərmədən əvvəl yenidən müəyyənləşdirdiyimiz kimi keçmişimiz xətti oldu (tam olaraq nə baş verdi).
Bu, keçmişinizin Perforce ilə bir araya sığmayacağından qorxmadan Git tərəfində branch-ları yaratmaq, işləmək, atmaq və birləşdirməkdə sərbəst ola biləcəyiniz deməkdir..
Yenidən düzəldə bilsəniz, bir Perforce serverinə kömək edə bilərsiniz.

[[_git_p4_branches]]
====== Branching

Perforce layihənizin birdən çox branch-ı varsa, hələ də şansınız var; git-p4 bunu Git kimi hiss etdirəcək şəkildə idarə edə bilər.
Deyək ki, Perforce deposunuz belə qurulub:

[source]
----
//depot
  └── project
      ├── main
      └── dev
----

Git-p4 bilər və deyək ki, belə bir görünüş spesifikasiyasına sahib bir `dev` branch-ı var:
Bu vəziyyəti tamamilə aşkar edin və düzgün bir şey edin:

[source]
----
//depot/project/main/... //depot/project/dev/...
----

Git-p4 bu vəziyyəti avtomatik olaraq aşkar edə bilər və düzgün işi edə bilər:

[source,console]
----
$ git p4 clone --detect-branches //depot/project@all
Importing from //depot/project@all into project
Initialized empty Git repository in /private/tmp/project/.git/
Importing revision 20 (50%)
    Importing new branch project/dev

    Resuming with change 20
Importing revision 22 (100%)
Updated branches: main dev
$ cd project; git log --oneline --all --graph --decorate
* eae77ae (HEAD, p4/master, p4/HEAD, master) main
| * 10d55fb (p4/project/dev) dev
| * a43cfae Populate //depot/project/main/... //depot/project/dev/....
|/
* 2b83451 Project init
----

Depo yolundakı ``@all'' spesifikatoruna diqqət yetirin; bu git-p4-ə yalnız bu alt ağac üçün son dəyişiklikləri deyil, bu yollara toxunan bütün dəyişiklikləri klonlamasını söyləyir.
Bu, Git-in bir klon konsepsiyasına daha yaxındır, ancaq uzun bir tarixə sahib bir layihə üzərində işləyirsinizsə, biraz vaxt ala bilər.

`--detect-branches`  flag-ı git-p4-ə Perforce-in branch xüsusiyyətlərini istifadə edərək branch-ları Git reflərinə uyğunlaşdırmağı məsləhət görür.
Bu uyğunlaşmalar Perforce serverində yoxdursa (Perforce'u istifadə etmək üçün tamamilə etibarlı bir yoldur), git-p4-ə branch uyğunlaşmalarının nə olduğunu söyləyə bilərsiniz və eyni nəticəni əldə edə bilərsiniz:

[source,console]
----
$ git init project
Initialized empty Git repository in /tmp/project/.git/
$ cd project
$ git config git-p4.branchList main:dev
$ git clone --detect-branches //depot/project@all .
----

`git-p4.branchList` konfiqurasiya dəyişənini `main:dev` olaraq təyin etmək git-p4-ə ``main'' and ``dev''-in hər iki branch olduğunu, ikincisinin isə birincinin övladı olduğunu bildirir.

İndi `git checkout -b dev p4/project/dev` və bəzi işlər görsək, git-p4 `git p4 submit` etdiyimiz zaman doğru branch-ı hədəf alacaq qədər ağıllıdır.
Təəssüf ki, git-p4 shallow klonları və çoxsaylı branch-ları qarışdıra bilməzr; nəhəng bir layihəniz varsa və birdən çox branch üzərində işləmək istəyirsinizsə, təqdim etmək istədiyiniz hər branch üçün bir dəfə `git p4 clone` işlətməlisiniz.

Branch-lar yaratmaq və ya birləşdirmək üçün bir Perforce müştərisindən istifadə etməlisiniz.
Git-p4 yalnız mövcud branch-lara sinxronizasiya edə və təqdim edə bilər və eyni anda yalnız bir xətti dəyişiklik edə bilər.
Git-də iki branch-ı birləşdirirsinizsə və yeni dəyişiklikləri göndərməyə çalışsanız, qeyd olunacaq bir çox fayl dəyişikliyidir; branch-ların inteqrasiyada iştirak etdiyi metadata itiriləcəkdir.

===== Git və Perforce Nəticəsi

Git-p4 Perforce server ilə bir Git iş axını istifadə etməyi mümkün edir və bu işdə olduqca yaxşıdır.
Bununla birlikdə, Perforce-un mənbədən məsul olduğunu və yalnız Git'i yerli işləmək üçün istifadə etdiyinizi unutmamalısınız.
Yalnız Git commit-lərini bölüşmək üçün həqiqətən diqqətli olun; digər insanların istifadə etdiyi bir remote-nuz varsa, əvvəllər Perforce serverinə təqdim olunmamış commit-lər verməyin.

Perforce və Git-in mənbə nəzarəti üçün müştəri kimi istifadəsini sərbəst şəkildə qarışdırmaq istəyirsinizsə və server administratorunu onu quraşdırmağa inandıra bilsəniz, Git Fusion, Git-i Perforce server üçün birinci dərəcəli versiya-nəzarət müştərisinə çevirir.