[[_git_svn]]
==== Git və Subversion

(((Subversion)))(((Interoperation with other VCSs, Subversion)))
Açıq mənbəli development layihələrinin böyük bir hissəsi və çox sayda korporativ layihə mənbə kodlarını idarə etmək üçün Subversiondan istifadə edir.

On ildən çoxdur ki, mövcuddur və əksər vaxt açıq mənbəli layihələr üçün _de facto_ VNS seçimi idi.
Bundan başqa, bir çox cəhətdən ondan əvvəl mənbə nəzarəti dünyasının böyük oğlu olan CVS-ə çox oxşayır.

(((git commands, svn)))(((git-svn)))
Git-in ən böyük xüsusiyyətlərindən biri də, `git svn` adlanan Subversion-a iki yönlü körpüdür.
Bu vasitə, Git'i bir Subversion serverinə etibarlı bir müştəri olaraq istifadə etməyə imkan verir, beləliklə Git'in bütün lokal xüsusiyyətlərindən istifadə edə bilərsiniz və sonra Subversion'u lokal istifadə etdiyiniz kimi bir Subversion serverinə push edə bilərsiniz.
Bu, həmkarlarınız qaranlıq və qədim yollarla işləməyə davam edərkən local branching və birləşmə, səhnə sahəsindən istifadə, rebasing və cherry-picking və s edə bilərsiniz.
Git-i korporativ mühitdə gizlətmək və developer-lərinizin daha effektiv olmasına kömək etmək üçün yaxşı bir yoldur, Git-i tam dəstəkləmək üçün infrastrukturun dəyişdirilməsini təmin edin.
Subversion körpüsü DVCS dünyasına açılan bir dərmandır.

===== `git svn`

Bütün Subversion körpü əmrləri üçün Git-dəki əsas əmr `git svn`-dir.
Bunun üçün kifayət qədər bir neçə əmr lazımdır, buna görə bir neçə sadə iş axınından keçərkən ən çox yayılmışları göstərəcəyik.
Qeyd etmək vacibdir ki, `git svn` istifadə edərkən Git-dən çox fərqli işləyən bir sistem olan Subversion ilə qarşılıqlı əlaqə qurursunuz.
Local branching və birləşmə işlərini edə bilsəniz də, işinizi bərpa edərək və eyni zamanda bir Git remote deposu ilə qarşılıqlı əlaqə qurmaq kimi şeylərdən çəkinərək tarixinizi mümkün qədər xətti tutmaq yaxşıdır.
Tarixinizi yenidən yazmayın və təkrar push etməyə çalışmayın və eyni zamanda Git developerləri ilə əməkdaşlıq etmək üçün paralel bir Git deposuna push etməyin.

Subversion yalnız bir xətti tarixçəyə sahib ola bilər və onu qarışdırmaq çox asandır.
Bir komanda ilə işləyirsinizsə, bəziləri SVN, bəziləri Git istifadə edirsinizsə, hər kəsin əməkdaşlıq etmək üçün SVN serverindən istifadə etdiyinə əmin olun - bunu etmək həyatınızı asanlaşdıracaq.

===== Ayarlamaq

Bu funksiyanı nümayiş etdirmək üçün yazmaq üçün daxil olduğunuz tipik bir SVN deposuna ehtiyacınız var.
Bu nümunələri kopyalamaq istəyirsinizsə, bir SVN test deposunun yazılı surətini çıxarmalısınız.
Bunu asanlıqla etmək üçün Subversion ilə gələn `svnsync` adlı bir vasitə istifadə edə bilərsiniz.

İzləmək üçün əvvəlcə yeni bir lokal Subversion deposu yaratmalısınız:

[source,console]
----
$ mkdir /tmp/test-svn
$ svnadmin create /tmp/test-svn
----

Sonra bütün istifadəçilərə revpropları dəyişdirməyə imkan verin - asan yol, həmişə 0-dan çıxan bir `pre-revprop-change` skriptini əlavə etməkdir:

[source,console]
----
$ cat /tmp/test-svn/hooks/pre-revprop-change
#!/bin/sh
exit 0;
$ chmod +x /tmp/test-svn/hooks/pre-revprop-change
----

Artıq bu proyekti depolardan və `svnsync init` çağıraraq lokal maşınınızla sinxronizasiya edə bilərsiniz.

[source,console]
----
$ svnsync init file:///tmp/test-svn \
  http://your-svn-server.example.org/svn/
----

Bu, sinxronizasiyanı işə salmaq üçün xüsusiyyətləri qurur.
Daha sonra kodu işə salmaqla klonlaya bilərsiniz:

[source,console]
----
$ svnsync sync file:///tmp/test-svn
Committed revision 1.
Copied properties for revision 1.
Transmitting file data .............................[...]
Committed revision 2.
Copied properties for revision 2.
[…]
----

Bu əməliyyat yalnız bir neçə dəqiqə çəkə bilsə də, orijinal deponu lokal əvəzinə başqa bir uzaq depoya köçürməyə çalışarsanız, 100-dən az commit olmasına baxmayaraq proses təxminən bir saat çəkəcəkdir.
Subversion bir dəfəyə bir revizyonu klonlamalı və sonra başqa bir depoya qaytarmalıdır - gülünc dərəcədə səmərəsizdir, amma bunu etmək üçün yeganə asan yoldur.

===== Başlayırıq

İndi yazma girişiniz olan bir Subversion deposuna sahib olduğunuz üçün tipik bir iş axınından keçə bilərsiniz.
Bütün Subversion deposunu yerli Git deposuna idxal edən `git svn clone` əmri ilə başlayacaqsınız.
Unutmayın ki, həqiqi bir yerləşdirilmiş Subversion deposundan idxal edirsinizsə, buradakı `file:///tmp/test-svn`-ni Subversion deposunuzun URL'si ilə əvəz etməlisiniz:

Artıq yazma girişiniz olan bir Subversion deposuna sahib olduğunuz üçün tipik bir iş axınından keçə bilərsiniz.
Bütün Subversion deposunu yerli Git deposuna idxal edən `git svn clone` əmri ilə başlayacaqsınız.
Unutmayın ki, həqiqi bir yerləşdirilmiş Subversion deposundan idxal edirsinizsə, buradakı `file:///tmp/test-svn`-ni Subversion deponuzun URL'si ilə əvəz etməlisiniz:

[source,console]
----
$ git svn clone file:///tmp/test-svn -T trunk -b branches -t tags
Initialized empty Git repository in /private/tmp/progit/test-svn/.git/
r1 = dcbfb5891860124cc2e8cc616cded42624897125 (refs/remotes/origin/trunk)
    A	m4/acx_pthread.m4
    A	m4/stl_hash.m4
    A	java/src/test/java/com/google/protobuf/UnknownFieldSetTest.java
    A	java/src/test/java/com/google/protobuf/WireFormatTest.java
…
r75 = 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae (refs/remotes/origin/trunk)
Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/my-calc-branch, 75
Found branch parent: (refs/remotes/origin/my-calc-branch) 556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae
Following parent with do_switch
Successfully followed parent
r76 = 0fb585761df569eaecd8146c71e58d70147460a2 (refs/remotes/origin/my-calc-branch)
Checked out HEAD:
  file:///tmp/test-svn/trunk r75
----

Bu, təqdim etdiyiniz URL-də iki əmr - `git svn init` və ardından `git svn fetch` kimi ekvivalentdir.
Bu bir müddət çəkə bilər.

Məsələn, test layihəsində yalnız 75 iş görülürsə və kod bazası o qədər böyük deyilsə, Git buna baxmayaraq hər versiyanı bir-bir yoxlamalı və fərdi olaraq həyata keçirməlidir.
Yüzlərlə və ya minlərlə commit-i olan bir layihə üçün bunun sözün əsl mənasında bitməsi saatlarla, hətta günlərlə davam edə bilər.

`-T trunk -b branches -t tags`  hissəsi Git-ə bu Subversion deposunun əsas branching və etiketləmə şərtlərini izlədiyini bildirir.
Trunk-nıza, branch-larınıza və ya etiketlərinizə fərqli ad verirsinizsə, bu seçimləri dəyişə bilərsiniz.
Bu çox yayılmış olduğundan, bütün hissəni standart düzən mənasını verən və bütün bu variantları nəzərdə tutan `-s` ilə əvəz edə bilərsiniz.
Aşağıdakı əmr bərabərdir:

[source,console]
----
$ git svn clone file:///tmp/test-svn -s
----

Bu nöqtədə branch-larınızı və etiketlərinizi idxal edən etibarlı bir Git deposuna sahib olmalısınız:

[source,console]
----
$ git branch -a
* master
  remotes/origin/my-calc-branch
  remotes/origin/tags/2.0.2
  remotes/origin/tags/release-2.0.1
  remotes/origin/tags/release-2.0.2
  remotes/origin/tags/release-2.0.2rc1
  remotes/origin/trunk
----

Bu vasitənin Subversion etiketlərini uzaqdan idarəedici olaraq necə idarə etdiyinə diqqət yetirin.
(((git commands, show-ref)))
Git plumbing əmri ilə `show-ref` ilə daha yaxından tanış olaq:

[source,console]
----
$ git show-ref
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/heads/master
0fb585761df569eaecd8146c71e58d70147460a2 refs/remotes/origin/my-calc-branch
bfd2d79303166789fc73af4046651a4b35c12f0b refs/remotes/origin/tags/2.0.2
285c2b2e36e467dd4d91c8e3c0c0e1750b3fe8ca refs/remotes/origin/tags/release-2.0.1
cbda99cb45d9abcb9793db1d4f70ae562a969f1e refs/remotes/origin/tags/release-2.0.2
a9f074aa89e826d6f9d30808ce5ae3ffe711feda refs/remotes/origin/tags/release-2.0.2rc1
556a3e1e7ad1fde0a32823fc7e4d046bcfd86dae refs/remotes/origin/trunk
----

Git bir Git serverindən klonladıqda bunu etmir; etiketli bir deponun təzə bir klondan sonra necə göründüyü:

[source,console]
----
$ git show-ref
c3dcbe8488c6240392e8a5d7553bbffcb0f94ef0 refs/remotes/origin/master
32ef1d1c7cc8c603ab78416262cc421b80a8c2df refs/remotes/origin/branch-1
75f703a3580a9b81ead89fe1138e6da858c5ba18 refs/remotes/origin/branch-2
23f8588dde934e8f33c263c6d8359b2ae095f863 refs/tags/v0.1.0
7064938bd5e7ef47bfd79a685a62c1e2649e2ce7 refs/tags/v0.2.0
6dcb09b5b57875f334f61aebed695e2e4193db5e refs/tags/v1.0.0
----

Git etiketi uzaq branch-lara müalicə etmək əvəzinə birbaşa `refs/tags`-ə gətirir.

===== Committing Back to Subversion

Artıq işləyən bir qovluğa sahib olduğunuz üçün Git-dən bir SVN müştərisi kimi effektiv istifadə edərək, proyektdə bir az iş görə bilər və commit-lərinizi yuxarı axın istiqamətində push edə bilərsiniz.
Fayllardan birini redaktə edib onu yerinə yetirirsinizsə, Subversion serverində olmayan Git-də yerli olaraq mövcud olan bir commit-iniz var:

[source,console]
----
$ git commit -am 'Adding git-svn instructions to the README'
[master 4af61fd] Adding git-svn instructions to the README
 1 file changed, 5 insertions(+)
----

Bundan sonra dəyişikliklərinizi yuxarıya doğru push etməlisiniz .
Bunun Subversion ilə işləmə tərzinizi necə dəyişdirdiyinə diqqət yetirin - bir neçə commit-i oflayn edə və sonra hamısını birdən Subversion serverinə köçürə bilərsiniz.
Subversion serverinə keçmək üçün `git svn dcommit` əmrini yerinə yetirirsiniz:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r77
    M	README.txt
r77 = 95e0222ba6399739834380eb10afcd73e0670bc5 (refs/remotes/origin/trunk)
No changes between 4af61fd05045e07598c553167e0f31c84fd6ffe1 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

Bu, Subversion server kodunun üstündə etdiyiniz bütün commit-ləri götürür, hər biri üçün bir Subversion commit-i götürür və sonra yerli Git unikal identifikatoru əlavə etmək üçün yenidən yazır.

Bu vacibdir, çünki commit-ləriniz üçün bütün SHA-1 hesablama cəmlərinin dəyişməsi deməkdir.
Qismən bu səbəbdən bir Subversion server ilə eyni vaxtda layihələrinizin Git əsaslı uzaq versiyaları ilə işləmək yaxşı bir fikir deyil.
Son commit-ə baxsanız, əlavə edilmiş yeni `git-svn-id`-i görə bilərsiniz:

[source,console]
----
$ git log -1
commit 95e0222ba6399739834380eb10afcd73e0670bc5
Author: ben <ben@0b684db3-b064-4277-89d1-21af03df0a68>
Date:   Thu Jul 24 03:08:36 2014 +0000

    Adding git-svn instructions to the README

    git-svn-id: file:///tmp/test-svn/trunk@77 0b684db3-b064-4277-89d1-21af03df0a68
----

Diqqət yetirin ki, commit etdiyiniz zaman əvvəlcə `4af61fd` ilə başlayan SHA-1 hesablama cəmi `95e0222` ilə başlayır.
Həm Git serverinə, həm də bir Subversion serverinə push etmək istəyirsinizsə, əvvəlcə Subversion serverinə (`dcommit`) push etməyə, çünki bu hərəkət commit məlumatınızı dəyişdirir.

===== Yeni Dəyişikliklərdə Pulling Etmək

Digər developerlərlə işləyirsinizsə, o zaman biriniz birini push edəcəksiniz, sonra digəri konflikt bir dəyişikliyə push etməyə çalışacaq.
İşlərinizdə birləşənə qədər bu dəyişiklik rədd ediləcək.
`git svn`-də belə görünür:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File '/trunk/README.txt' is out of date
W: d5837c4b461b7c0e018b49d12398769d2bfc240a and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 f414c433af0fd6734428cf9d2a9fd8ba00ada145 c80b6127dd04f5fcda218730ddf3a2da4eb39138 M	README.txt
Current branch master is up to date.
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.
----

Bu vəziyyəti həll etmək üçün serverdə hələ olmadığınız hər hansı bir dəyişiklikləri aşağı salan və serverdə olanların üstündə etdiyiniz hər hansı bir işi yenidən bərpa edən `git svn rebase`-i işlədə bilirsiniz:

[source,console]
----
$ git svn rebase
Committing to file:///tmp/test-svn/trunk ...

ERROR from SVN:
Transaction is out of date: File '/trunk/README.txt' is out of date
W: eaa029d99f87c5c822c5c29039d19111ff32ef46 and refs/remotes/origin/trunk differ, using rebase:
:100644 100644 65536c6e30d263495c17d781962cfff12422693a b34372b25ccf4945fe5658fa381b075045e7702a M	README.txt
First, rewinding head to replay your work on top of it...
Applying: update foo
Using index info to reconstruct a base tree...
M	README.txt
Falling back to patching base and 3-way merge...
Auto-merging README.txt
ERROR: Not all changes have been committed into SVN, however the committed
ones (if any) seem to be successfully integrated into the working tree.
Please see the above messages for details.
----

İndi bütün işləriniz Subversion serverindəki işlərin üstündədir, beləliklə uğurla `dcommit` edə bilərsiniz:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	README.txt
Committed r85
    M	README.txt
r85 = 9c29704cc0bbbed7bd58160cfb66cb9191835cd8 (refs/remotes/origin/trunk)
No changes between 5762f56732a958d6cfda681b661d2a239cc53ef5 and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

Diqqət yetirmədən əvvəl local işinizi birləşdirməyinizi tələb edən Gitdən fərqli olaraq, `git svn` bunu yalnız dəyişikliklər konflikt təşkil edərsə (Subversionun necə işlədiyi kimi) edir.
Başqası bir dəyişikliyi bir fayla push edirsə, sonra başqa bir fayla dəyişiklik göndərirsinizsə, `dcommi`-iniz yaxşı işləyəcək:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	configure.ac
Committed r87
    M	autogen.sh
r86 = d8450bab8a77228a644b7dc0e95977ffc61adff7 (refs/remotes/origin/trunk)
    M	configure.ac
r87 = f3653ea40cb4e26b6281cec102e35dcba1fe17c4 (refs/remotes/origin/trunk)
W: a0253d06732169107aa020390d9fefd2b1d92806 and refs/remotes/origin/trunk differ, using rebase:
:100755 100755 efa5a59965fbbb5b2b0a12890f1b351bb5493c18 e757b59a9439312d80d5d43bb65d4a7d0389ed6d M	autogen.sh
First, rewinding head to replay your work on top of it...
----

Bunu unutmamaq vacibdir, çünki nəticə siz push etdiyiniz zaman hər iki kompüterinizdə olmayan bir layihə vəziyyətidir.
Dəyişikliklər bir-birinə uyğun deyilsə, konflikt təşkil etmirsə, diaqnozu çətin olan problemlərlə qarşılaşa bilərsiniz.
Bu, bir Git serverindən istifadə etməkdən fərqlidir - Git-də, vəziyyəti dərc etmədən əvvəl müştəri sisteminizdə tam olaraq yoxlaya bilərsiniz, halbuki SVN-də, işdən əvvəl və commit götürdükdən sonra vəziyyətlərin eyni olduğuna əmin ola bilməzsiniz.

Özünüzü commit etməyə hazır olmasanız da, Subversion serverindən dəyişikliklər etmək üçün bu əmri də işləməlisiniz.
Yeni məlumatları əldə etmək üçün `git svn fetch`-i işə sala bilərsiniz, lakin `git svn rebase` gətirir və sonra local commit-lərinizi yeniləyir.

[source,console]
----
$ git svn rebase
    M	autogen.sh
r88 = c9c5f83c64bd755368784b444bc7a0216cc1e17b (refs/remotes/origin/trunk)
First, rewinding head to replay your work on top of it...
Fast-forwarded master to refs/remotes/origin/trunk.
----

Hər dəfə `git svn rebase` işlətmək kodunuzun daima yeniləndiyinə əmin olur.
Buna baxmayaraq işləyərkən iş qovluğunuzun təmiz olduğundan əmin olmalısınız.

Local dəyişiklikləriniz varsa, işinizi gizlətməlisiniz və ya `git svn rebase`-i işə salmadan əvvəl müvəqqəti olaraq etməlisiniz - əks təqdirdə, rebase-in birləşmə konflikti ilə nəticələnəcəyini görsə əmr dayanacaq.

===== Git Branching Issues

Bir Git iş axını ilə rahat olduqda, ehtimal ki, mövzu branch-ları yaradacaq, üzərində işləyəcək və sonra onları birləşdirəcəksiniz.
`git svn` vasitəsi ilə Subversion serverinə müraciət edirsinizsə, branch-larınızı birləşdirmək əvəzinə hər dəfə işinizi tək branch-da bərpa etmək istəyə bilərsiniz.

Rebasing seçiminə üstünlük vermə səbəbi, Subversionun xətti bir tarixçəyə sahib olması və Git kimi birləşmələrlə məşğul olmamasıdır, buna görə də `git svn` snapshotları Subversion commit-lərinə çevirərkən yalnız ilk valideynə commit edir.

Tutaq ki, tarixiniz aşağıdakı kimidir: bir `experiment` branch-ı yaratdınız, iki commit etdiniz və sonra onları yenidən `master`-ə çevirdiniz.
`dcommit` etdiyiniz zaman, nəticəni belə görürsünüz:

[source,console]
----
$ git svn dcommit
Committing to file:///tmp/test-svn/trunk ...
    M	CHANGES.txt
Committed r89
    M	CHANGES.txt
r89 = 89d492c884ea7c834353563d5d913c6adf933981 (refs/remotes/origin/trunk)
    M	COPYING.txt
    M	INSTALL.txt
Committed r90
    M	INSTALL.txt
    M	COPYING.txt
r90 = cb522197870e61467473391799148f6721bcf9a0 (refs/remotes/origin/trunk)
No changes between 71af502c214ba13123992338569f4669877f55fd and refs/remotes/origin/trunk
Resetting to the latest refs/remotes/origin/trunk
----

Birləşdirilmiş tarixə malik bir branch-da `dcommit` çalışması yaxşı işləyir, ancaq Git layihə tarixçənizə baxdığınız zaman `experiment` branch-da etdiyiniz commit-lərin heç birini yenidən yazmadı - bunun əvəzinə bütün bu dəyişikliklər tək birləşmə commit-inin SVN versiyası.

Başqa birisi işləyən klonlaşdırdıqda, gördükləri bütün işin içərisinə yığılan birləşmə əmridir, sanki `git merge --squash` işlətmisiniz; haradan gəldiyi və nə vaxt edildiyi barədə commit məlumatlarını görmürlər.

===== Subversion Branching

Subversionda branching, Git-də branching ilə eyni deyil; istifadə etməkdən çox çəkinə bilsəniz, ən yaxşısı budur.
Bununla birlikdə, `git svn` istifadə edərək Subversion-dakı branch-ları yarada və commit edə bilərsiniz.

===== Yeni SVN Branch-ının Yaradılması

Subversion-da yeni bir branch yaratmaq üçün `git svn branch [new-branch]` işlədin:

[source,console]
----
$ git svn branch opera
Copying file:///tmp/test-svn/trunk at r90 to file:///tmp/test-svn/branches/opera...
Found possible branch point: file:///tmp/test-svn/trunk => file:///tmp/test-svn/branches/opera, 90
Found branch parent: (refs/remotes/origin/opera) cb522197870e61467473391799148f6721bcf9a0
Following parent with do_switch
Successfully followed parent
r91 = f1b64a3855d3c8dd84ee0ef10fa89d27f1584302 (refs/remotes/origin/opera)
----

Bu, Subversiondakı `svn copy trunk branches/opera` əmrinin ekvivalentini edir və Subversion serverində işləyir.
Qeyd etmək vacibdir ki, sizi bu branch-a daxil etmir; Əgər bu anda commit götürsəniz, bu əməliyyat serverdəki `opera`-a yox, `trunk`-a gedəcək.

===== Aktiv Branche-ların Dəyişdirilməsi

Git, tarixinizdəki Subversion branch-larınızın hər hansı birinin ucunu axtararaq dcommits-nizin hansı branch-a  getdiyini müəyyənləşdirir - yalnız birinə sahib olmalısınız və mövcud branch-ınızda bir "git-svn-id" olan sonuncusu olmalıdır tarix.

Git, tarixinizdəki Subversion branch-larınızın hər hansı birinin ucunu axtararaq dcommitslərinizin hansı qola getdiyini müəyyənləşdirir - yalnız birinə sahib olmalısınız və mövcud filialınızda bir `git-svn-id` olan sonuncusu olmalıdır.

Eyni anda birdən çox branch üzərində işləmək istəyirsinizsə, bu branch üçün idxal olunan Subversion commit-indən başlayaraq müəyyən Subversion branch-larına `dcommit` etmək üçün local branch-lar qura bilərsiniz.
Ayrı-ayrılıqda işləyə biləcəyiniz bir `opera` branch-ı istəsəniz, çalışdıra bilərsiniz:

[source,console]
----
$ git branch opera remotes/origin/opera
----

İndi `opera` branch-ınızı `trunk`-a  (`master` branch-nızın) birləşdirmək istəyirsinizsə, bunu normal bir git birləşmə ilə edə bilərsiniz.
Ancaq təsviri bir commit mesajı verməlisiniz (`-m` vasitəsilə), əks halda birləşmə faydalı bir şey əvəzinə ``Merge branch opera''  deyəcəkdir.

Unutmayın ki, bu əməliyyatı yerinə yetirmək üçün `git merge` istifadə etsəniz də birləşmə ehtimalı Subversionda olduğundan daha asan olacaq (çünki Git sizin üçün uyğun birləşmə bazasını avtomatik olaraq aşkar edəcək), Git birləşmə commiti normal deyil.
Bu məlumatları birdən çox valideynə baxan bir commit-i yerinə yetirə bilməyən bir Subversion serverinə qaytarmalısınız; belə ki, onu push etdikdən sonra, başqa bir branch-ın bütün işlərində tək bir commit altında əzilən tək bir commit-ə  bənzəyir.
Bir branch-ı digərinə birləşdirdikdən sonra asanlıqla geri qaytara bilməzsiniz və normal olaraq Gitdə olduğu kimi bu branch üzərində işləməyə davam edə bilməzsiniz.
İşlətdiyiniz `dcommit` əmri hansı branch-ın birləşdirildiyini bildirən hər hansı bir məlumatı silir, bu səbəbdən sonrakı birləşmə bazası hesablamaları səhv olacaq -`dcommit`  `git merge` nəticənizi `git merge --squash` kimi işlədir. 
Təəssüf ki, bu vəziyyətdən qaçınmaq üçün yaxşı bir yol yoxdur - Subversion bu məlumatı saxlaya bilməz, buna görə də onu server olaraq istifadə edərkən məhdudiyyətləri ilə əlil olacaqsınız.
Problemlərin qarşısını almaq üçün trunk-a birləşdirdikdən sonra local branch-ı (bu halda, `opera`) silməlisiniz.

===== Subversion Əmrləri

`git svn` alətlər dəsti Subversion-dakılara bənzər bəzi funksionallıq təmin edərək Git-ə keçidi asanlaşdırmağa kömək edəcək bir sıra əmrlər təqdim edir.
Budur sizə Subversionun istifadə etdiyini verən bir neçə əmr.

====== SVN Style Tarixi

Subversiona alışmışsınızsa və tarixinizi SVN çıxış tərzində görmək istəyirsinizsə, SVN formatında commit tarixçənizə baxmaq üçün `git svn log`-nu işə sala bilərsiniz:

[source,console]
----
$ git svn log
------------------------------------------------------------------------
r87 | schacon | 2014-05-02 16:07:37 -0700 (Sat, 02 May 2014) | 2 lines

autogen change

------------------------------------------------------------------------
r86 | schacon | 2014-05-02 16:00:21 -0700 (Sat, 02 May 2014) | 2 lines

Merge branch 'experiment'

------------------------------------------------------------------------
r85 | schacon | 2014-05-02 16:00:09 -0700 (Sat, 02 May 2014) | 2 lines

updated the changelog
----

`git svn log` haqqında iki vacib şeyi bilməlisiniz.
Birincisi, Subversion serverindən məlumat istəyən həqiqi `svn log` əmrindən fərqli olaraq oflayn işləyir.
İkincisi, yalnız Subversion serverinə sadiq qaldığınızı göstərir.
İcazə vermədiyiniz Local Git commit-ləri görünmür; bu müddətdə insanların Subversion serverinə verdiyi commit-lər də yoxdur.
Subversion serverindəki commit-lərin son bilinən vəziyyətinə daha çox bənzəyir.
 
====== SVN Annotasiyası

`git svn log` əmri, `svn log` əmrini oflayn olaraq simulyasiya etdiyi kimi `git svn blame [FILE]` işlədərək  `svn annotate` bərabərliyini ala bilərsiniz.
Nəticə belə görünür:

[source,console]
----
$ git svn blame README.txt
 2   temporal Protocol Buffers - Google's data interchange format
 2   temporal Copyright 2008 Google Inc.
 2   temporal http://code.google.com/apis/protocolbuffers/
 2   temporal
22   temporal C++ Installation - Unix
22   temporal =======================
 2   temporal
79    schacon Committing in git-svn.
78    schacon
 2   temporal To build and install the C++ Protocol Buffer runtime and the Protocol
 2   temporal Buffer compiler (protoc) execute the following:
 2   temporal
----

Yenə də yerli olaraq Gitdə etdiyiniz və ya bu müddətdə Subversion-a itələdiyiniz commit-ləri göstərmir.

====== SVN Server Məlumatı

Siz də `git svn info`-nu işə salıb `svn info`-un sizə verdiyi məlumatları əldə edə bilərsiniz:

[source,console]
----
$ git svn info
Path: .
URL: https://schacon-test.googlecode.com/svn/trunk
Repository Root: https://schacon-test.googlecode.com/svn
Repository UUID: 4c93b258-373f-11de-be05-5f7a86268029
Revision: 87
Node Kind: directory
Schedule: normal
Last Changed Author: schacon
Last Changed Rev: 87
Last Changed Date: 2009-05-02 16:07:37 -0700 (Sat, 02 May 2009)
----

Bu, `blame` və `log` kimi bir şeydir ki, oflayn işləyir və yalnız Subversion server ilə sonuncu dəfə ünsiyyət qurduğunuz günə qədərdir.

====== Subversion Ignore-larını Nə İgnore Etdi

Hər hansı bir yerdə qurulmuş `svn:ignore` xüsusiyyətlərinə sahib olan bir Subversion deposunu klonlaşdırırsınızsa, ehtimal ki, commit etməməli olduğunuz faylları təsadüfən etməməyiniz üçün müvafiq `.gitignore` fayllarını təyin etmək istərdiniz.
`git svn`-in bu məsələdə kömək edəcək iki əmri var.
Birincisi, avtomatik olaraq sizin üçün müvafiq `.gitignore` fayllarını yaradan `git svn create-ignore`, növbəti işinizdə bunları daxil edə bilər.
İkinci əmr, `.gitignore` faylına qoymağınız lazım olan sətirləri düzəltmək üçün yazdıran  `git svn show-ignore`-dir, nəticədə proyektinizə çıxarılan faylı yönləndirə bilərsiniz:

[source,console]
----
$ git svn show-ignore > .git/info/exclude
----

Bu şəkildə layihəni `.gitignore` sənədləri ilə zibil etmirsiniz.
Subversion komandasındakı tək Git istifadəçisisinizsə və komanda yoldaşlarınız layihədəki `.gitignore` sənədlərini istəmirsinizsə, bu yaxşı bir seçimdir.

===== Git-Svn-nin Qısa Məzmunu

`git svn` alətləri bir Subversion serverinə qapıldığınızda və ya başqa bir şəkildə Subversion serverinin işlədilməsini zəruri edən inkişaf mühitində olduğunuzda faydalıdır.
Bununla birlikdə şikəst Git olduğunu düşünməlisiniz, yoxsa tərcümədə sizi və həmkarlarınızı qarışdıra biləcək məsələlərə toxunacaqsınız.
Problemlərdən uzaq olmaq üçün aşağıdakı qaydalara əməl etməyə çalışın:

* `git merge` tərəfindən birləşdirmə commit-lərini ehtiva etməyən xətti bir Git tarixçəsi saxlayın. 
  Əsas xətt branch-ınız xaricində etdiyiniz hər hansı bir işi yenidən üzərinə qaytarın; birləşdirməyin.
* Ayrı bir Git server qurmayın və əməkdaşlıq etməyin.
  Yeni developerlər üçün klonları sürətləndirmək üçün birinə sahib ola bilərsiniz, ancaq ona `git-svn-id` girişi olmayan bir şey push etməyin.
  Hətta hər bir gediş mesajını bir `git-svn-id` üçün yoxlayan və onsuz commit-ləri olan itkiləri rədd edən bir `pre-receive` hook-nu əlavə etmək istəyə bilərsiniz.

Bu təlimatlara əməl etsəniz, Subversion server ilə işləmək daha dözümlü ola bilər.
Ancaq həqiqi bir Git serverinə keçmək mümkündürsə, bunu etmək komandanızı daha çox qazana bilər.
