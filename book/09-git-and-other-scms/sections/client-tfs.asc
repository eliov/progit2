==== Git və TFS

(((Interoperation with other VCSs, TFS)))
(((TFS)))((("TFVC", see="TFS")))
Git, Windows developer-ləri ilə populyarlaşır və Windows-da kod yazırsınızsa, Microsoft Team Foundation Server (TFS) istifadə etmək üçün böyük bir şans var.
TFS, qüsur və iş elementlərinin izlənməsi, Scrum və digərləri üçün proses dəstəyi, kodun nəzərdən keçirilməsi və versiya nəzarətini əhatə edən bir əməkdaşlıq paketidir.
Qarşıda bir az qarışıqlıq var: *TFS* həm Git'i, həm də *TFVC* (Team Foundation Version Control) adını verdikləri öz xüsusi VNCS-lərini istifadə edərək nəzarət mənbəyi kodunu dəstəkləyən serverdir.
Git dəstəyi TFS üçün bir qədər yeni bir xüsusiyyətdir (2013 versiyası ilə göndərmə), buna görə əvvəldən gələn bütün vasitələr, əsasən TFVC ilə çalışsalar da versiya nəzarət hissəsini ``TFS'' adlandırırlar.

Özünüzü TFVC istifadə edən bir komandada görürsəniz, ancaq versiya nəzarət müştərisi olaraq Git'i istifadə etsəniz, sənin üçün bir layihə var.

===== Hansı Tool

(((git-tf)))(((git-tfs)))
Əslində iki var: git-tf və git-tfs. 

Git-tfs (https://github.com/git-tfs/git-tfs[] saytında tapın) bir .NET layihəsidir və (bu yazı kimi) yalnız Windows-da işləyir.
Git depoları ilə işləmək üçün yüksək performanslı və Git deposunun bağırsaqları ilə çox rahatlıq təmin edən Git-in kitabxana yönümlü tətbiqi olan libgit2 üçün .NET bağlamalarından istifadə edir.
Libgit2, Git-in tam bir tətbiqi deyil, beləliklə fərqi ödəmək üçün git-tfs həqiqətən bəzi əməliyyatlar üçün əmr sətiri Git müştəri çağıracaq, buna görə də Git depoları ilə əlaqəli süni məhdudiyyətlər yoxdur.
TFVC xüsusiyyətlərini dəstəkləməsi çox yetkindir, çünki serverlərlə əməliyyatlar üçün Visual Studio assemblilərindən stifadə edir.
Bu o assemblilərə girişə ehtiyacınız olacaq deməkdir, yəni Visual Studio-nun son versiyasını (versiya 2012-dən bəri Express daxil olmaqla 2010-cu ildən bəri hər hansı bir nəşr) və ya Visual Studio SDK-nı quraşdırmanız lazımdır.

[CAUTION]
====
Git-tf, End-of-Life (EOL), heç bir yeniləmə almayacaq.
Artıq Microsoft tərəfindən dəstəklənmir.
====

Git-tf (hansı ki evi https://archive.codeplex.com/?p=gittf[] ünvanındadı) bir Java layihəsidir və bu şəkildə Java işləmə müddəti olan istənilən kompüterdə işləyir.
JGit (Git'in bir JVM tətbiqi) vasitəsi ilə Git depoları ilə əlaqə qurur, yəni Git funksiyaları baxımından heç bir məhdudiyyətə sahib deyildir.
Bununla birlikdə, TFVC üçün dəstəyi git-tfs ilə müqayisədə məhduddur - məsələn branch-ları dəstəkləmir.

Beləliklə, hər bir vasitənin müsbət və mənfi cəhətləri var və bir-birinə üstünlük verən çoxlu vəziyyət var.
Hər ikisinin əsas istifadəsini bu kitabda nəzərdən keçirəcəyik.

[NOTE]
====
Bu təlimatları izləmək üçün TFVC əsaslı bir depoya daxil olmağınız lazımdır.
Bunlar vəhşi təbiətdə Git və ya Subversion depoları qədər çox deyil, buna görə özünüzdən birini yaratmanız lazım ola bilər.
Codeplex (https://archive.codeplex.com/[])) və ya Visual Studio Online (https://visualstudio.microsoft.com[]) hər ikisi bunun üçün yaxşı seçimdir.
====


===== Başlanğıc:  `git-tf`

Etdiyiniz ilk şey hər hansı bir Git layihəsində olduğu kimi klondur.
`git-tf` ilə görünən budur:

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main project_git
----

Birinci arqument bir TFVC kolleksiyasının URL'si, ikincisi  `$/project/branch` şəklində, üçüncüsü isə yaradılacaq yerli Git deposuna gedən yoldur (sonuncusu istəyə bağlıdır).
Git-tf hər dəfə yalnız bir branch ilə işləyə bilər; fərqli bir TFVC branch-ında chekinlər etmək istəyirsinizsə, bu branch-dan yeni bir klon etməlisiniz.

Bu, tamamilə işləyən bir Git deposu yaradır:

[source,console]
----
$ cd project_git
$ git log --all --oneline --decorate
512e75a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Checkin message
----

Buna yalnız son dəyişikliklər endirildiyi anlamına bir _shallow_ klonu deyilir.
TFVC, hər bir müştərinin tarixin tam bir nüsxəsini əldə etməsi üçün nəzərdə tutulmamışdır, beləliklə git-tf varsayılan olaraq yalnız son versiyasını alır, bu da daha sürətlidir.

Bir az vaxtınız varsa, ehtimal ki, bütün layihə tarixçəsini `--deep` seçimindən istifadə edərək klonlamağa dəyər:

[source,console]
----
$ git tf clone https://tfs.codeplex.com:443/tfs/TFS13 $/myproject/Main \
  project_git --deep
Username: domain\user
Password:
Connecting to TFS...
Cloning $/myproject into /tmp/project_git: 100%, done.
Cloned 4 changesets. Cloned last changeset 35190 as d44b17a
$ cd project_git
$ git log --all --oneline --decorate
d44b17a (HEAD, tag: TFS_C35190, origin_tfs/tfs, master) Goodbye
126aa7b (tag: TFS_C35189)
8f77431 (tag: TFS_C35178) FIRST
0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
        Team Project Creation Wizard
----

`TFS_C35189` kimi adlarla etiketlərə diqqət yetirin; bu, hansı Gitin TFVC dəyişiklikləri ilə əlaqəli olduğunu bilməyinizə kömək edən bir xüsusiyyətdir.
Bu onu təmsil etmək üçün gözəl bir yoldur, çünki sadə bir günlük əmri ilə hansınızın TFVC-də mövcud olan bir snapshot ilə əlaqəli olduğunu görə bilərsiniz.
Bunlar lazım deyil (və əslində onları `git config git-tf.tag false` ilə söndürə bilərsiniz) - git-tf, `.git/git-tf` faylında həqiqi commit-changeset uyğunlaşmalarını saxlayır.


===== Başlanğıc: `git-tfs`

Git-tfs klonlama bir az fərqli davranır.
Baxaq:

[source,powershell]
----
PS> git tfs clone --with-branches \
    https://username.visualstudio.com/DefaultCollection \
    $/project/Trunk project_git
Initialized empty Git repository in C:/Users/ben/project_git/.git/
C15 = b75da1aba1ffb359d00e85c52acb261e4586b0c9
C16 = c403405f4989d73a2c3c119e79021cb2104ce44a
Tfs branches found:
- $/tfvc-test/featureA
The name of the local branch will be : featureA
C17 = d202b53f67bde32171d5078968c644e562f1c439
C18 = 44cd729d8df868a8be20438fdeeefb961958b674
----

`--with-branches` flag-na diqqət yetirin.
Git-tfs, TFVC branch-larını Git branch-larına uyğunlaşdırma qabiliyyətinə malikdir və bu bayraq hər TFVC branch-ı üçün yerli bir Git branch-ının qurulmasını bildirir.
TFS-də branched zamanı və ya birləşdiyiniz təqdirdə bu çox tövsiyə olunur, lakin TFS 2010-dan əvvəlki bir serverlə işləməyəcək - git-tfs onları adi qovluqlardan ayıra bilməz, çünki bu buraxılışdan əvvəl ``branch-lar'' sadəcə qovluq idi.

Nəticədə çıxan Git deposuna nəzər salaq:

[source,powershell]
----
PS> git log --oneline --graph --decorate --all
* 44cd729 (tfs/featureA, featureA) Goodbye
* d202b53 Branched from $/tfvc-test/Trunk
* c403405 (HEAD, tfs/default, master) Hello
* b75da1a New project
PS> git log -1
commit c403405f4989d73a2c3c119e79021cb2104ce44a
Author: Ben Straub <ben@straub.cc>
Date:   Fri Aug 1 03:41:59 2014 +0000

    Hello

    git-tfs-id: [https://username.visualstudio.com/DefaultCollection]$/myproject/Trunk;C16
----

Klonun başlanğıc nöqtəsini (TFVC-də `Trunk`) və bir child branch-ını (TFVC-də `featureA`) təmsil edən iki local branch, `master` və `featureA` var.
Ayrıca, `tfs` ``remote''-da bir neçə referensa sahib olduğunu görə bilərsiniz: TFVC branch-larını təmsil edən `default` və `featureA`.
Git-tfs klonladığınız branch-ı `tfs/default`-a xəritələşdirir və digərləri öz adlarını alır.

Diqqəti cəlb edən başqa bir şey, mesajlardakı `git-tfs-id:` sətirləridir.
Etiket əvəzinə git-tfs, TFVC dəyişikliklərini Git commit-ləri ilə əlaqələndirmək üçün bu markerlərdən istifadə edir.
Bu, Git commit-lərinizin TFVC-yə göndərilmədən əvvəl və sonra fərqli bir SHA-1 qarışığına sahib olacağı mənasını verir.

===== Git-tf[s] Workflow

[NOTE]
====
Hansı alətdən istifadə etməyinizdən asılı olmayaraq, problemlərlə qarşılaşmamaq üçün bir neçə Git konfiqurasiya dəyərini təyin etməlisiniz.

[source,console]
----
$ git config set --local core.ignorecase=true
$ git config set --local core.autocrlf=false
----
====

İstəyəcəyiniz açıq bir şey layihə üzərində işləməkdir.
TFVC və TFS, iş axınınıza mürəkkəblik əlavə edə biləcək bir neçə xüsusiyyətə malikdir:

. TFVC-də təmsil olunmayan xüsusiyyət branch-ları bir az mürəkkəblik əlavə edir.
  Bu, TFVC və Gitin branch-ları təmsil etdiyi *çox* fərqli yollarla əlaqəlidir.
. Qeyd edək ki, TFVC, istifadəçilərə serverdəki faylları ``checkout'' və kilidləməyə imkan verir ki, heç kim onu ​​düzəldə bilməz.
  Şübhəsiz ki, bu, onları yerli deponuzda düzəltməyinizə mane olmayacaq, ancaq dəyişikliklərinizi TFVC serverinə göndərmə vaxtı gələndə mane ola bilərsiniz.
. TFS, girişə icazə verilməzdən əvvəl bir TFS build-test dövrünün uğurla başa çatması lazım olan ``gated'' qeydlər konsepsiyasına malikdir.
   Bu, TFVC-də burada ``shelve'' funksiyasından istifadə edir, hansı ki burada ətraflı danışmırıq.
   Bunu git-tf ilə manual olaraq saxta edə bilərsiniz və git-tfs gate-aware olan `checkintool` əmrini təmin edir.

Qısaca, burada əhatə edəcəyimiz bu məsələlərin əksəriyyətini kənara qoyan və ya çəkindirən xoşbəxt yoldur.

===== Workflow: `git-tf`


Deyək ki, bir az iş görmüsünüz, bir neçə Git `master` üzərində commit götürdünüz və TFVC serverində irəliləyişinizi bölüşməyə hazırsınız.
Budur Git depomuz:

[source,console]
----
$ git log --oneline --graph --decorate --all
* 4178a82 (HEAD, master) update code
* 9df2ae3 update readme
* d44b17a (tag: TFS_C35190, origin_tfs/tfs) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

`4178a82` commit-indəki ani görüntüyü götürmək və TFVC serverinə ötürmək istəyirik.
Əvvəlcə hər şey: gəlin görək komanda yoldaşlarımızdan biri son əlaqə qurandan bəri bir şey edib etməyib:

[source,console]
----
$ git tf fetch
Username: domain\user
Password:
Connecting to TFS...
Fetching $/myproject at latest changeset: 100%, done.
Downloaded changeset 35320 as commit 8ef06a8. Updated FETCH_HEAD.
$ git log --oneline --graph --decorate --all
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
| * 4178a82 (HEAD, master) update code
| * 9df2ae3 update readme
|/
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

Deyəsən başqası da işləyir və indi fərqli tarixə sahibik.
Gitin parladığı yer budur, amma necə davam edəcəyimizə dair iki seçimimiz var:

. Birləşdirmə commit-i etmək, Git istifadəçisi olaraq təbiidir (nəticə olaraq `git pull`-da elə bunu edir) və git-tf bunu sizin üçün sadə bir `git tf pull` ilə edə bilər.
  Ancaq unutmayın ki, TFVC bu şəkildə düşünmür və birləşməni push etsəniz tarixiniz hər iki tərəfdə fərqli görünməyə başlayacaq, bu da qarışıq ola bilər.
  Bununla birlikdə, bütün dəyişikliklərinizi bir dəyişiklik kimi təqdim etməyi planlaşdırırsınızsa, bu, yəqin ki, ən asan seçimdir.
. Rebasing, tariximizi xətti edir, yəni hər bir Git commit-imizi bir TFVC dəyişikliyinə çevirmə seçimimiz var.
  Ən çox seçim açıq qaldığı üçün bunu bu şəkildə etməyinizi məsləhət görürük; git-tf hətta `git tf pull --rebase` ilə sizin üçün asanlaşdırır.

Seçim sizindir.
Bu nümunə üçün biz geri qayıdacağıq:

[source,console]
----
$ git rebase FETCH_HEAD
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320, origin_tfs/tfs) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

İndi TFVC serverinə giriş yazmağa hazırıq.
Git-tf, sonuncudan başlayaraq bütün dəyişiklikləri əks etdirən tək bir dəyişiklik etmə seçimini (default olaraq `--shallow`) və hər bir Git commit-i üçün yeni bir dəyişiklik yaratma seçimini verir (`--deep`).
Bu nümunə üçün yalnız bir dəyişiklik düzəldəcəyik:

[source,console]
----
$ git tf checkin -m 'Updating readme and code'
Username: domain\user
Password:
Connecting to TFS...
Checking in to $/myproject: 100%, done.
Checked commit 5a0e25e in as changeset 35348
$ git log --oneline --graph --decorate --all
* 5a0e25e (HEAD, tag: TFS_C35348, origin_tfs/tfs, master) update code
* 6eb3eb5 update readme
* 8ef06a8 (tag: TFS_C35320) just some text
* d44b17a (tag: TFS_C35190) Goodbye
* 126aa7b (tag: TFS_C35189)
* 8f77431 (tag: TFS_C35178) FIRST
* 0745a25 (tag: TFS_C35177) Created team project folder $/tfvctest via the \
          Team Project Creation Wizard
----

TFVC-nin `5a0e25e` commit-i ilə eyni snapshot-nu saxladığını göstərən yeni bir `TFS_C35348` etiketi var.
Qeyd etmək vacibdir ki, hər bir Gitin TFVC-də dəqiq bir həmkarına sahib olması lazım deyil; məsələn, `6eb3eb5`  commit-i serverin heç bir yerində yoxdur.

Əsas iş axını budur.
Unutmamaq istədiyiniz bir neçə başqa məqam var:

* Branching yoxdur.
  Git-tf hər dəfə yalnız bir TFVC branch-ından Git depoları yarada bilər.
* TFVC və ya Git istifadə edərək əməkdaşlıq edin, lakin hər ikisini istifadə etməyin.
  Eyni TFVC deposunun fərqli git-tf klonlarında, baş ağrısına səbəb olmayan fərqli yekunlaşdırıcı SHA-1 hash-ları ola bilər.
* Komandanızın iş axını Git-də iş birliyini və TFVC ilə vaxtaşırı sinxronizasiyanı əhatə edirsə, yalnız Git depolarından biri ilə TFVC-yə qoşulun.

===== Workflow: `git-tfs`

Git-tfs istifadə edərək eyni ssenaridən keçək.
Git depomuzdakı `master` branch-na etdiyimiz yeni commit-lər:

[source,powershell]
----
PS> git log --oneline --graph --all --decorate
* c3bd3ae (HEAD, master) update code
* d85e5a2 update readme
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 (tfs/default) Hello
* b75da1a New project
----

İndi gəlin görək başqaları işimizi görüb ya yox:

[source,powershell]
----
PS> git tfs fetch
C19 = aea74a0313de0a391940c999e51c5c15c381d91d
PS> git log --all --oneline --graph --decorate
* aea74a0 (tfs/default) update documentation
| * c3bd3ae (HEAD, master) update code
| * d85e5a2 update readme
|/
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

Bəli, iş yoldaşımızın yeni `aea74a0`  əmri kimi görünən yeni bir TFVC dəyişiklik dəsti əlavə etdiyi və `tfs/default` uzaq branch-ın hərəkət etdiyi ortaya çıxdı.

Git-tf-də olduğu kimi, bu fərqli tarixi necə həll etmək üçün iki əsas seçimimiz var:

. Xətti bir tarixi qorumaq üçün yenidən bərpa edin.
. Həqiqətən baş verənləri qorumaq üçün birləşdirin.

Bu vəziyyətdə, hər bir Git-in bir TFVC dəyişikliyinə çevrildiyi bir ``dərin'' yoxlama edəcəyik, buna görə geri qayıdaq.

[source,powershell]
----
PS> git rebase tfs/default
First, rewinding head to replay your work on top of it...
Applying: update readme
Applying: update code
PS> git log --all --oneline --graph --decorate
* 10a75ac (HEAD, master) update code
* 5cec4ab update readme
* aea74a0 (tfs/default) update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

İndi TFVC serverinə kodumuzu yoxlayaraq töhfəmizi tamamlamağa hazırıq.
HEAD-dən tapılan ilk `tfs` uzaq branch-ına gedən yolda hər bir Git əməli üçün bir TFVC dəyişikliyi yaratmaq üçün burada `rcheckin` əmrindən istifadə edəcəyik (`checkin` əmri yalnız bir dəyişik yaradır; Git kimi commit-lər götürür).

[source,powershell]
----
PS> git tfs rcheckin
Working with tfs remote: default
Fetching changes from TFS to minimize possibility of late conflict...
Starting checkin of 5cec4ab4 'update readme'
 add README.md
C20 = 71a5ddce274c19f8fdc322b4f165d93d89121017
Done with 5cec4ab4b213c354341f66c80cd650ab98dcf1ed, rebasing tail onto new TFS-commit...
Rebase done successfully.
Starting checkin of b1bf0f99 'update code'
 edit .git\tfs\default\workspace\ConsoleApplication1/ConsoleApplication1/Program.cs
C21 = ff04e7c35dfbe6a8f94e782bf5e0031cee8d103b
Done with b1bf0f9977b2d48bad611ed4a03d3738df05ea5d, rebasing tail onto new TFS-commit...
Rebase done successfully.
No more to rcheckin.
PS> git log --all --oneline --graph --decorate
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

TFVC serverinə hər uğurlu qeydiyyatdan keçdikdən sonra git-tfs-in qalan işləri əvvəlki işlərinə necə qaytardığına diqqət yetirin.
Bunun səbəbi SHA-1 hash-ları dəyişdirən commit mesajlarının altına `git-tfs-id` sahəsini əlavə etməsidir.

Bu tam olaraq dizayn edilmiş şəkildədir və narahat olacağınız bir şey yoxdur, ancaq bunun baş verdiyini, xüsusən də Git commit-lərini başqaları ilə bölüşdüyünüzü bilməlisiniz.

TFS, versiya nəzarət sistemi ilə inteqrasiya olunan bir çox xüsusiyyətə malikdir, məsələn iş item-ları, təyin olunmuş reviewer-lərin, gated checkins və s.
Bu xüsusiyyətlərlə yalnız bir əmr sətiri alətindən istifadə etmək çətin ola bilər, amma xoşbəxtlikdən git-tfs qrafik qeyd alətini çox asanlıqla işə salmağa imkan verir:

[source,powershell]
----
PS> git tfs checkintool
PS> git tfs ct
----

Belə görünəcəkdir:

.The git-tfs checkin tool
image::images/git-tfs-ct.png[The git-tfs checkin tool]

Bu, Visual Studio içərisindən başlayan eyni dialoq olduğundan TFS istifadəçilərinə tanış görünür.

Git-tfs ayrıca Git deposundan TFVC branch-larını idarə etməyə imkan verir.
Nümunə olaraq birini yaradaq:

[source,powershell]
----
PS> git tfs branch $/tfvc-test/featureBee
The name of the local branch will be : featureBee
C26 = 1d54865c397608c004a2cadce7296f5edc22a7e5
PS> git log --oneline --graph --decorate --all
* 1d54865 (tfs/featureBee) Creation branch $/myproject/featureBee
* ff04e7c (HEAD, tfs/default, master) update code
* 71a5ddc update readme
* aea74a0 update documentation
| * 44cd729 (tfs/featureA, featureA) Goodbye
| * d202b53 Branched from $/tfvc-test/Trunk
|/
* c403405 Hello
* b75da1a New project
----

TFVC-də bir branch yaratmaq, bu branch-ın mövcud olduğu bir dəyişiklik dəsti əlavə etmək deməkdir və bu, Git commit-i kimi proqnozlaşdırılır.
Git-tfs `tfs/featureBee` uzaq branch-ını *yaratdığını* da unutmayın, lakin `HEAD` hələ də `master`-ə işarə edir.
Newly-minted branch-da işləmək istəyirsinizsə, yeni commit-lərinizi, bəlkə də həmin commit-dən mövzu commit-i yaratmaqla `1d54865` commit-i üzərində qurmaq istəyirsiniz.

===== Git və TFS Qısa Məzmunu

Git-tf və Git-tfs TFVC serverlə əlaqə yaratmaq üçün əla vasitədir.
Git gücünü yerli olaraq istifadə etməyə, mərkəzi TFVC serverinə davamlı gediş-gəlişdən çəkinməyə və bütün komandanızı Git-ə köçməyə məcbur etmədən bir developer olaraq həyatınızı asanlaşdırmağa imkan verirlər.
Windows-da işləyirsinizsə (çox güman ki, komandanız TFS istifadə edir), xüsusiyyət dəsti daha tamamlandığından git-tfs istifadə etmək istərdiniz, ancaq başqa bir platformada işləsəniz, daha məhdud olan git-tf istifadə edəcəksiniz.
Bu fəsildəki alətlərin əksəriyyətində olduğu kimi, bu versiya idarəetmə sistemlərindən birini kanonik olaraq seçməlisiniz və digərini tabe bir şəkildə istifadə etməlisiniz - ya Git ya da TFVC əməkdaşlıq mərkəzi olmalıdır, lakin hər ikisi deyil.