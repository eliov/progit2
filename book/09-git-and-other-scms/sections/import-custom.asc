[[_custom_importer]]
==== Xüsusi İdxalçı

(((git commands, fast-import)))
(((Importing, from others)))
Sisteminiz yuxarıda göstərilənlərdən biri deyilsə, onlayn bir idxalçı axtarmalısınız - keyfiyyətli idxalçılar CVS, Clear Case, Visual Source Safe hətta arxivlər siyahısı daxil olmaqla bir çox digər sistemlər üçün mövcuddur.

Bu vasitələrdən heç biri sizin üçün işləmirsə, daha qaranlıq bir alətiniz varsa və ya başqa bir xüsusi idxal prosesinə ehtiyacınız varsa, `git fast-import` istifadə etməlisiniz.
Bu əmr, müəyyən Git məlumatlarını yazmaq üçün stdin-dən sadə təlimatları oxuyur.
Git obyektlərini bu şəkildə yaratmaq, xam Git əmrlərini işə salmaqdan və ya xam obyektləri yazmağa çalışmaqdan daha asandır (daha çox məlumat üçün <<ch10-git-internals#ch10-git-internals>> bax).
Bu şəkildə, idxal etdiyiniz sistemdən lazımi məlumatları oxuyan və stdout üçün birbaşa təlimatları yazan bir idxal skriptini yaza bilərsiniz.
Daha sonra bu proqramı işə sala və nəticəsini `git fast-import` vasitəsilə ötürə bilərsiniz.

Sürətlə nümayiş etdirmək üçün sadə bir idxalçı yazacaqsınız.
Tutaq ki, `current`-də işləyirsiniz, zaman zaman qovluğu bir time-stamped `back_YYYY_MM_DD` ehtiyat qovluğuna kopyalayaraq proyektinizi backup edirsiniz və bunu Git-ə idxal etmək istəyirsiniz.
Qovluq quruluşunuz belə görünür:

[source,console]
----
$ ls /opt/import_from
back_2014_01_02
back_2014_01_04
back_2014_01_14
back_2014_02_03
current
----

Bir Git qovluğunu idxal etmək üçün Gitin məlumatlarını necə saxladığını nəzərdən keçirməlisiniz.
Xatırladığınız kimi, Git əsas etibarilə məzmunun bir snapshot-una işarə edən obyektlərin əlaqəli siyahısıdır.
Etməli olduğunuz şey məzmunun snpshot-larının nə olduğunu, məlumatları onlara yönəldən şeyləri və daxil olma qaydalarını  `fast-import` etməyinizdir.
Strategiyanız snapshot-lardan bir-bir keçmək və hər bir qovluğu əvvəlki ilə əlaqələndirərək hər bir kataloqun məzmunu ilə commit-lər yaratmaq olacaq.

<<ch08-customizing-git#_an_example_git_enforced_policy>>-də etdiyimiz kimi, bunu Ruby-də yazacağıq, çünki ümumiyyətlə işləmək və oxunması asan olur.
Bu nümunəni tanış olduğunuz hər hansı bir şeydə olduqca asanlıqla yaza bilərsiniz - yalnız müvafiq məlumatları `stdout`-a yazdırmaq lazımdır. 
Və Windows üzərində işləyirsinizsə, bu, sətirlərinizin sonunda vaqon qayıtmalarını daxil etməməyə xüsusi diqqət yetirməli olduğunuz mənasını verir - `git fast-import` yalnız Windows istifadə etdiyi daşıyıcı xətləri (CRLF) deyil, yalnız xətt lentləri (LF) istəməyə gəldikdə çox dəqiqdir. 

Başlamaq üçün hədəf qovluğunu dəyişəcəksiniz və hər biri commit olaraq idxal etmək istədiyiniz bir snapshot-u olan hər subdirectory-ni müəyyənləşdirəcəksiniz.
Hər subdirectory-ni keçib ixrac etmək üçün lazım olan əmrləri çap edəcəksiniz.
Əsas dövrəniz belə görünür:

[source,ruby]
----
last_mark = nil

# loop through the directories
Dir.chdir(ARGV[0]) do
  Dir.glob("*").each do |dir|
    next if File.file?(dir)

    # move into the target directory
    Dir.chdir(dir) do
      last_mark = print_export(dir, last_mark)
    end
  end
end
----

Hər bir qovluğun içərisində əvvəlki snapshot-un manifestini və işarəsini götürən və bunun manifestini və işarəsini qaytaran `print_export` işlədirsiniz; bu şəkildə onları düzgün bir şəkildə bağlaya bilərsiniz.
``Mark''  commit-ə verdiyiniz bir identifikator üçün `fast-import` terminidir; commit-lər yaradarkən, hər birinə digər commit-lərdən əlaqələndirmək üçün istifadə edə biləcəyiniz bir işarə verirsiniz.
Beləliklə, `print_export` metodunda ediləcək ilk şey qovluq adından bir işarənin yaradılmasıdır:

[source,ruby]
----
mark = convert_dir_to_mark(dir)
----

Bunu bir dizin qovluğu yaratmaqla və indeks dəyərini işarə olaraq istifadə etməklə edəcəksiniz, çünki bir işarə tam olmalıdır.
Metodunuz belə görünür:

[source,ruby]
----
$marks = []
def convert_dir_to_mark(dir)
  if !$marks.include?(dir)
    $marks << dir
  end
  ($marks.index(dir) + 1).to_s
end
----

Commit-inizin tam bir təmsilçiliyinə sahib olduğunuz üçün, commit meta məlumatları üçün bir tarixə ehtiyacınız var.
Tarix qovluq adına ifadə olunduğundan, onu təhlil edəcəksiniz.
`Print_export` falınızdakı növbəti sətir:

[source,ruby]
----
date = convert_dir_to_date(dir)
----

where `convert_dir_to_date` is defined as:

[source,ruby]
----
def convert_dir_to_date(dir)
  if dir == 'current'
    return Time.now().to_i
  else
    dir = dir.gsub('back_', '')
    (year, month, day) = dir.split('_')
    return Time.local(year, month, day).to_i
  end
end
----

Bu, hər bir qovluğun tarixi üçün bir tam dəyər qaytarır.
Hər bir commit üçün lazım olan son meta məlumat parçası, qlobal dəyişəndə sabit kodladığınız ötürmə məlumatlarıdır:

[source,ruby]
----
$author = 'John Doe <john@example.com>'
----

İndi idxalçı üçün commit məlumatlarını çap etməyə başlamağa hazırsınız.
İlkin məlumatda commit obyektini və hansı branch-da olduğunuzu, sonra yaratdığınız işarəni, məlumat verən məlumatı və commit mesajını, sonra varsa əvvəlki commit-i təyin etdiyiniz bildirilir.
Kod belə görünür:

[source,ruby]
----
# print the import information
puts 'commit refs/heads/master'
puts 'mark :' + mark
puts "committer #{$author} #{date} -0700"
export_data('imported from ' + dir)
puts 'from :' + last_mark if last_mark
----

Saat dilimini (-0700) kodlaşdırın, çünki bunu etmək asandır.
Başqa bir sistemdən idxal edirsinizsə, zaman zonasını ofset kimi göstərməlisiniz.
Commit mesajı xüsusi bir formatda ifadə olunmalıdır:

[source]
----
data (size)\n(contents)
----

Format məlumat sözündən, oxunacaq məlumatın ölçüsündən, yeni bir sətirdən və nəhayət məlumatdan ibarətdir.
Faylın məzmununu daha sonra müəyyənləşdirmək üçün eyni formatı istifadə etməlisiniz, çünki köməkçi bir metod, `export_data` yaradırsınız:

[source,ruby]
----
def export_data(string)
  print "data #{string.size}\n#{string}"
end
----

Qalan yalnız hər bir snapshot üçün fayl məzmununun müəyyənləşdirilməsidir.
Bu çox asandır, çünki hər biriniz bir kataloqdadır - qovluqdakı hər bir sənədin məzmunu və ardından `deleteall` əmrini çap edə bilərsiniz.
Daha sonra Git hər bir snapshot-u uyğun şəkildə qeyd edəcək:

[source,ruby]
----
puts 'deleteall'
Dir.glob("**/*").each do |file|
  next if !File.file?(file)
  inline_data(file)
end
----

Qeyd: Bir çox sistem öz reviziyalarını bir commit-dən digərinə dəyişiklik kimi qəbul etdiyini düşündüyündən, sürətli idxal da hər bir faylda hansı faylların əlavə olunduğunu, silindiyini və ya dəyişdirildiyini və yeni məzmununun nə olduğunu müəyyənləşdirmək üçün əmrlər götürə bilər.
Snapshot-lar arasındakı fərqləri hesablaya bilər və yalnız bu məlumatları verə bilərsiniz, ancaq bunu etmək daha mürəkkəbdir - Git-ə bütün məlumatları verə və onu başa düşməsinə icazə verə bilərsiniz.
Bu, məlumatlarınıza daha uyğun gəlirsə, məlumatlarınızı bu şəkildə necə təqdim edəcəyiniz barədə ətraflı məlumat üçün `fast-import` man page-ini yoxlayın.

Yeni fayl məzmununun siyahısı və ya dəyişdirilmiş bir sənədin yeni məzmunu ilə göstərilməsi formatı belədir:

[source]
----
M 644 inline path/to/file
data (size)
(file contents)
----

Budur, 644 rejimi (executable fyllarınız varsa, bunun əvəzinə 755-i aşkarlamalı və təyin etməlisiniz) və sətir içərisindəki məzmunu bu sətirdən dərhal sonra sadalayacağınızı söyləyir.
`inline_data` metodunuz belə görünür:

[source,ruby]
----
def inline_data(file, code = 'M', mode = '644')
  content = File.read(file)
  puts "#{code} #{mode} inline #{file}"
  export_data(content)
end
----

Daha əvvəl müəyyənləşdirdiyiniz `export_data` metodundan təkrar istifadə edirsiniz, çünki bu, commit mesajı məlumatlarınızı təyin etməyinizlə eynidir.

Etməli olduğunuz son şey cari işarəni növbəti təkrarlamaya ötürmək üçün qaytarmaqdır:

[source,ruby]
----
return mark
----

[NOTE]
====
Windows-da işləyirsinizsə, əlavə bir addım əlavə etdiyinizə əmin olmalısınız.
Daha əvvəl də qeyd edildiyi kimi, Windows yeni sətir simvolları üçün CRLF istifadə edir, `git fast-import` isə yalnız LF gözləyir.
Bu problemi həll etmək və `git fast-import`-ı xoşbəxt etmək üçün ruby-ə CRLF əvəzinə LF istifadə etməsini söyləməlisiniz:

[source,ruby]
----
$stdout.binmode
----
====

Bu qədər.
Budur skript bütövlükdə:

[source,ruby]
----
#!/usr/bin/env ruby

$stdout.binmode
$author = "John Doe <john@example.com>"

$marks = []
def convert_dir_to_mark(dir)
    if !$marks.include?(dir)
        $marks << dir
    end
    ($marks.index(dir)+1).to_s
end

def convert_dir_to_date(dir)
    if dir == 'current'
        return Time.now().to_i
    else
        dir = dir.gsub('back_', '')
        (year, month, day) = dir.split('_')
        return Time.local(year, month, day).to_i
    end
end

def export_data(string)
    print "data #{string.size}\n#{string}"
end

def inline_data(file, code='M', mode='644')
    content = File.read(file)
    puts "#{code} #{mode} inline #{file}"
    export_data(content)
end

def print_export(dir, last_mark)
    date = convert_dir_to_date(dir)
    mark = convert_dir_to_mark(dir)

    puts 'commit refs/heads/master'
    puts "mark :#{mark}"
    puts "committer #{$author} #{date} -0700"
    export_data("imported from #{dir}")
    puts "from :#{last_mark}" if last_mark

    puts 'deleteall'
    Dir.glob("**/*").each do |file|
        next if !File.file?(file)
        inline_data(file)
    end
    mark
end

# Loop through the directories
last_mark = nil
Dir.chdir(ARGV[0]) do
    Dir.glob("*").each do |dir|
        next if File.file?(dir)

        # move into the target directory
        Dir.chdir(dir) do
            last_mark = print_export(dir, last_mark)
        end
    end
end
----

Bu skripti işlədirsinizsə, buna bənzər bir məzmun əldə edəcəksiniz:

[source,console]
----
$ ruby import.rb /opt/import_from
commit refs/heads/master
mark :1
committer John Doe <john@example.com> 1388649600 -0700
data 29
imported from back_2014_01_02deleteall
M 644 inline README.md
data 28
# Hello

This is my readme.
commit refs/heads/master
mark :2
committer John Doe <john@example.com> 1388822400 -0700
data 29
imported from back_2014_01_04from :1
deleteall
M 644 inline main.rb
data 34
#!/bin/env ruby

puts "Hey there"
M 644 inline README.md
(...)
----

İmporter-i çalıştırmak üçün bu çıxışı idxal etmək istədiyiniz Git qovluğunda olarkən `git fast-import` vasitəsilə ilə ötürün.
Yeni bir qovluq yaradıb sonra bir başlanğıc nöqtəsi üçün içərisindəki `git init` -i işə sala və sonra skriptinizi işə sala bilərsiniz:

[source,console]
----
$ git init
Initialized empty Git repository in /opt/import_to/.git/
$ ruby import.rb /opt/import_from | git fast-import
git-fast-import statistics:
---------------------------------------------------------------------
Alloc'd objects:       5000
Total objects:           13 (         6 duplicates                  )
      blobs  :            5 (         4 duplicates          3 deltas of          5 attempts)
      trees  :            4 (         1 duplicates          0 deltas of          4 attempts)
      commits:            4 (         1 duplicates          0 deltas of          0 attempts)
      tags   :            0 (         0 duplicates          0 deltas of          0 attempts)
Total branches:           1 (         1 loads     )
      marks:           1024 (         5 unique    )
      atoms:              2
Memory total:          2344 KiB
       pools:          2110 KiB
     objects:           234 KiB
---------------------------------------------------------------------
pack_report: getpagesize()            =       4096
pack_report: core.packedGitWindowSize = 1073741824
pack_report: core.packedGitLimit      = 8589934592
pack_report: pack_used_ctr            =         10
pack_report: pack_mmap_calls          =          5
pack_report: pack_open_windows        =          2 /          2
pack_report: pack_mapped              =       1457 /       1457
---------------------------------------------------------------------
----

Gördüyünüz kimi uğurla başa çatdıqda, həyata keçirdikləri barədə bir çox statistika verir.
Bu vəziyyətdə, 1 branch-a  4 commit üçün cəmi 13 obyekt idxal etdiniz.
İndi yeni tarixçənizi görmək üçün `git log`-u işə sala bilərsiniz:

[source,console]
----
$ git log -2
commit 3caa046d4aac682a55867132ccdfbe0d3fdee498
Author: John Doe <john@example.com>
Date:   Tue Jul 29 19:39:04 2014 -0700

    imported from current

commit 4afc2b945d0d3c8cd00556fbe2e8224569dc9def
Author: John Doe <john@example.com>
Date:   Mon Feb 3 01:00:00 2014 -0700

    imported from back_2014_02_03
----

Budur - gözəl, təmiz bir Git deposu.
Heç bir şeyin yoxlanılmadığını qeyd etmək vacibdir - əvvəlcə iş qovluğunda heç bir faylınız yoxdur.
Bunları əldə etmək üçün branchnızı `master`-i n olduğu yerə sıfırlamalısınız:

[source,console]
----
$ ls
$ git reset --hard master
HEAD is now at 3caa046 imported from current
$ ls
README.md main.rb
----

`fast-import` aləti ilə daha çox şey edə bilərsiniz - fərqli rejimləri, ikili məlumatları, birdən çox branch-ı və birləşmə, etiketlər, irəliləyiş göstəriciləri və s.
Daha mürəkkəb ssenarilərin bir sıra nümunələri Git qaynaq kodunun `contrib/fast-import` qovluğunda mövcuddur.

