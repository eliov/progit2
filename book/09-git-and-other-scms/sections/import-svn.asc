==== Subversion

(((Subversion)))
(((Importing, from Subversion)))
`git svn` istifadəsi ilə bağlı əvvəlki bölümü oxumusunuzsa, bu təlimatları asanlıqla `git svn clone` deposuna getmək üçün istifadə edə bilərsiniz; sonra, Subversion serverindən istifadəni dayandırın, yeni bir Git serverinə keçin və istifadə etməyə başlayın.
Tarixçəni istəsəniz, məlumatı Subversion serverindən çıxara bildiyiniz müddətdə (bir müddət ala bilər) bacara bilərsiniz.

Bununla birlikdə, idxal mükəmməl deyil; və çox uzun çəkəcəyi üçün bunu da edə bilərsiz.
İlk problem müəllif məlumatlarıdır.
Subversion-da, hər bir iş görən şəxsin sistemdə commit məlumatında qeyd olunan bir istifadəçisi var.
Əvvəlki hissədəki nümunələr, `blame` çıxışı və  `git svn log` kimi bəzi yerlərdə `schacon` göstərir.
Bunu daha yaxşı Git müəllif məlumatlarına uyğunlaşdırmaq istəyirsinizsə, Subversion istifadəçilərindən Git müəlliflərinə qədər bir xəritəyə ehtiyacınız var.
Bu istifadəçi şəklində belə bir formatda olan `users.txt` adlı bir fayl yaradın:

[source]
----
schacon = Scott Chacon <schacon@geemail.com>
selse = Someo Nelse <selse@geemail.com>
----

SVN-nin istifadə etdiyi müəllif adlarının siyahısını əldə etmək üçün bunu edə bilərsiniz:

[source,console]
----
$ svn log --xml --quiet | grep author | sort -u | \
  perl -pe 's/.*>(.*?)<.*/$1 = /'
----

Gündəlik çıxışı XML formatında yaradır, sonra yalnız müəllif məlumatları olan sətirləri saxlayır, dublikatları atır, XML etiketlərini silir.
Aydındır ki, bu yalnız `grep`, `sort` və `perl` quraşdırılmış bir maşın üzərində işləyir.
Sonra, hər bir girişin yanına ekvivalent Git istifadəçi məlumatlarını əlavə edə bilmək üçün bu çıxışı `users.txt` faylınıza yönləndirin.

[NOTE]
====
Bunu bir Windows maşınında sınayırsınızsa, problemlə qarşılaşacağınız nöqtə budur.
Microsoft,https://docs.microsoft.com/en-us/azure/devops/repos/git/perform-migration-from-svn-to-git[] saytında bəzi yaxşı məsləhətlər və nümunələr verir.
====

Müəllif məlumatlarını daha dəqiq bir şəkildə göstərməsinə kömək etmək üçün bu faylı `git svn`-ə təqdim edə bilərsiniz.
Ayrıca,`git svn`-ə Subversion-un normal olaraq idxal etdiyi meta məlumatları daxil etməməsini, `--no-metadata`-nı `clone` ya da  `init` əmrinə keçirməklə də deyə bilərsiniz.
Metadata, Gitin idxal zamanı meydana gətirəcəyi hər bir mesajın içərisində bir `git-svn-id` var.
Bu, Git log-unuzu şişirə bilər və bir az anlaşılmaz edə bilər.

[NOTE]
====
Git deposundakı commit-ləri orijinal SVN deposuna qaytarmaq istədiyiniz zaman metadatanı saxlamalısınız.
Sinxronizasiyanı commit log-da istəmirsinizsə, `--no-metadata`  parametrini əlavə etməyə çəkinməyin.
====

Bu, `import` əmrinizi belə göstərir:

[source,console]
----
$ git svn clone http://my-project.googlecode.com/svn/ \
      --authors-file=users.txt --no-metadata --prefix "" -s my_project
$ cd my_project
----

İndi `my_project` qovluğunuzda daha yaxşı bir Subversion idxal etməlisiniz.
Buna bənzər commit-lər yerinə:

[source]
----
commit 37efa680e8473b615de980fa935944215428a35a
Author: schacon <schacon@4c93b258-373f-11de-be05-5f7a86268029>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk

    git-svn-id: https://my-project.googlecode.com/svn/trunk@94 4c93b258-373f-11de-
    be05-5f7a86268029
----

they look like this:

[source]
----
commit 03a8785f44c8ea5cdb0e8834b7c8e6c469be2ff2
Author: Scott Chacon <schacon@geemail.com>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk
----

Müəllif sahəsi həm daha yaxşı görünür, həm də `git-svn-id` artıq yoxdur.
Ayrıca bir az post-import sonrası təmizləmə etməlisiniz.
Birincisi, `git svn` qurduğu qəribə referansları təmizləməlisiniz.
Əvvəlcə yazıları qəribə uzaq branch-lardan daha çox həqiqi etiket olduqları üçün daşıyacaqsınız, sonra qalan branch-ları local olduqları üçün köçürəcəksiniz.

Etiketləri uyğun Git etiketi olmaq üçün hərəkət etdirin:

[source,console]
----
$ for t in $(git for-each-ref --format='%(refname:short)' refs/remotes/tags); do git tag ${t/tags\//} $t && git branch -D -r $t; done
----

Bu, `refs/remotes/tags/` ilə başlayan uzaq branch-lar olan referansları alır və onları həqiqi (yüngül) etiketlər edir.
Ardından, referansların qalan hissəsini local branch-lar halına gətirmək üçün `refs/remotes` altına köçürün:

[source,console]
----
$ for b in $(git for-each-ref --format='%(refname:short)' refs/remotes); do git branch $b refs/remotes/$b && git branch -D -r $b; done
----

Elə ola bilər ki, `@xxx` (harada ki xxx ədəddir) şəkilçisi olan bəzi əlavə branch-lar görərsiniz, Subversionda isə yalnız bir branch görürsünüz.
Bu, əslində Git üçün heç bir sintaktik həmkarı olmayan bir şey olan ``peg-revisions'' adlı Subversion xüsusiyyətidir.
Beləliklə, `git svn` branch-ın düzəldilməsini həll etmək üçün svn-də yazdığınız şəkildə svn versiya nömrəsini branch-ın adına əlavə edir.
Artıq peg-revisions düzəlişləri ilə maraqlanmırsınızsa, sadəcə onları silin:

[source,console]
----
$ for p in $(git for-each-ref --format='%(refname:short)' | grep @); do git branch -D $p; done
----

İndi bütün köhnə branch-lar əsl Git branch-larıdır və bütün köhnə etiketlər əsl Git etiketləridir.
Təmizləmək üçün son bir şey var.
Təəssüf ki, `git svn`, Subversionun standart branch-ına uyğunlaşan `trunk` adlı əlavə bir branch yaradır, lakin `trunk` `master` ilə eyni yerə işarə edir.
`master` daha idiomatik olaraq Git olduğundan əlavə branch-ı necə silmək olar:

[source,console]
----
$ git branch -d trunk
----

Ediləcək son şey yeni Git serverinizi bir remote olaraq əlavə edib ona push etməkdir.
Serverinizi məsafədən əlavə etmək üçün bir nümunə:

[source,console]
----
$ git remote add origin git@my-git-server:myrepository.git
----

Bütün branch-larınızın və etiketlərinizin yuxarı qalxmasını istədiyiniz üçün indi bunu edə bilərsiniz:

[source,console]
----
$ git push origin --all
$ git push origin --tags
----

Bütün branch-larınız və etiketləriniz təmiz bir idxalda yeni Git serverinizdə olmalıdır.
