[[_git_tfs]]
==== TFS

(((TFS)))(((Importing, from TFS)))
Komandanız mənbə nəzarətini TFVC-dən Git-ə çevirirsə, əldə edə biləcəyiniz ən yüksək əslinə uyğun dönüşümünü istəyərsiniz.
Bu o deməkdir ki, interop bölməsi üçün həm git-tfs, həm də git-tf-ni əhatə etdiyimiz halda, yalnız bu hissə üçün git-tfs-i əhatə edəcəyik, çünki git-tfs branch-ları dəstəkləyir və bu git-tf istifadə etmək olduqca çətindir.

[NOTE]
====
Bu, birtərəfli dönüşümdür.
Nəticədə Git deposu orijinal TFVC layihəsi ilə əlaqə qura bilməyəcək.
====

Ediləcək ilk şey istifadəçi adlarının xəritəsidir.
TFVC, dəyişikliklər üçün müəllif sahəsinə daxil olanlarla kifayət qədər sərbəstdir, lakin Git insan tərəfindən oxunaqlı bir ad və e-poçt ünvanı istəyir.
Bu məlumatı `tf` əmr sətrini müştərisindən ala bilərsiniz:

[source,powershell]
----
PS> tf history $/myproject -recursive > AUTHORS_TMP
----

Bu, layihənin tarixindəki bütün dəyişiklikləri tutur və 'İstifadəçi' sütununun (ikincisi) məlumatlarını çıxarmaq üçün işləyəcəyimiz AUTHORS_TMP sənədinə qoyuruq.
Faylı açın və sütunun hansı işarədə başlayıb bitdiyini və yerini dəyişdirin, aşağıdakı əmr sətrində `cut` əmrini `11-20` parametrlərini tapılanlarla əvəz edin:

[source,powershell]
----
PS> cat AUTHORS_TMP | cut -b 11-20 | tail -n+3 | sort | uniq > AUTHORS
----

`cut` əmri hər sətirdən yalnız 11 ilə 20 arasındakı simvolları saxlayır.
`tail` əmri sahə başlıqları və ASCII-art vurğulayan ilk iki sətiri atlayır.
Bütün bunların nəticəsi, təkrarlamaları aradan qaldırmaq üçün `sort` və `uniq` şəkillərinə göndərilir və `AUTHORS` adlı bir faylda saxlanılır.
Növbəti addım manualdır; git-tfs-in bu fayldan səmərəli istifadə etməsi üçün hər sətir bu formatda olmalıdır:

[source,text]
----
DOMAIN\username = User Name <email@address.com>
----

Sol tərəfdəki hissə TFVC-dən ``User'' sahəsidir və bərabər işarəsinin sağ tərəfindəki hissə Git commit-ləri üçün istifadə ediləcək istifadəçi adıdır.

Bu faylı əldə etdikdən sonra bir sonrakı iş, maraqlandığınız TFVC layihəsinin tam bir klonunu yaratmaqdır:

[source,powershell]
----
PS> git tfs clone --with-branches --authors=AUTHORS https://username.visualstudio.com/DefaultCollection $/project/Trunk project_git
----

Bundan sonra, commit mesajların altından `git-tfs-id` bölmələrini təmizləmək lazımdır.
Aşağıdakı əmr bunu edəcəkdir:

[source,powershell]
----
PS> git filter-branch -f --msg-filter 'sed "s/^git-tfs-id:.*$//g"' '--' --all
----

Bu, ``git-tfs-id:'' ilə başlayan hər hansı bir sətri boşluqla əvəz etmək üçün Git-bash mühitindən  `sed` əmrini istifadə edir və Git bundan sonra ignore qalacaq.

Hamısı bitdikdən sonra yeni bir remote əlavə etməyə, bütün branch-larınızı yuxarıya qaldırmağa və komandanızın Git-dən işə başlamasına hazırsınız.

